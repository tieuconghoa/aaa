//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MultiThreadTest.RService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerInfo", Namespace="http://schemas.datacontract.org/2004/07/Remoting.Contract.Data")]
    [System.SerializableAttribute()]
    public partial class PlayerInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExperienceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FriendVerifyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid GuidIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasEnterAlumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasExtendWishField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasPhotoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsApproveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFirstLoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastSceneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal MoneyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PassWordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SchoolIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SchoolNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StyleTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrueNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserSignField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Experience {
            get {
                return this.ExperienceField;
            }
            set {
                if ((this.ExperienceField.Equals(value) != true)) {
                    this.ExperienceField = value;
                    this.RaisePropertyChanged("Experience");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FriendVerify {
            get {
                return this.FriendVerifyField;
            }
            set {
                if ((this.FriendVerifyField.Equals(value) != true)) {
                    this.FriendVerifyField = value;
                    this.RaisePropertyChanged("FriendVerify");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid GuidId {
            get {
                return this.GuidIdField;
            }
            set {
                if ((this.GuidIdField.Equals(value) != true)) {
                    this.GuidIdField = value;
                    this.RaisePropertyChanged("GuidId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasEnterAlum {
            get {
                return this.HasEnterAlumField;
            }
            set {
                if ((this.HasEnterAlumField.Equals(value) != true)) {
                    this.HasEnterAlumField = value;
                    this.RaisePropertyChanged("HasEnterAlum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasExtendWish {
            get {
                return this.HasExtendWishField;
            }
            set {
                if ((this.HasExtendWishField.Equals(value) != true)) {
                    this.HasExtendWishField = value;
                    this.RaisePropertyChanged("HasExtendWish");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasPhoto {
            get {
                return this.HasPhotoField;
            }
            set {
                if ((this.HasPhotoField.Equals(value) != true)) {
                    this.HasPhotoField = value;
                    this.RaisePropertyChanged("HasPhoto");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsApprove {
            get {
                return this.IsApproveField;
            }
            set {
                if ((this.IsApproveField.Equals(value) != true)) {
                    this.IsApproveField = value;
                    this.RaisePropertyChanged("IsApprove");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFirstLogin {
            get {
                return this.IsFirstLoginField;
            }
            set {
                if ((this.IsFirstLoginField.Equals(value) != true)) {
                    this.IsFirstLoginField = value;
                    this.RaisePropertyChanged("IsFirstLogin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastScene {
            get {
                return this.LastSceneField;
            }
            set {
                if ((object.ReferenceEquals(this.LastSceneField, value) != true)) {
                    this.LastSceneField = value;
                    this.RaisePropertyChanged("LastScene");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Money {
            get {
                return this.MoneyField;
            }
            set {
                if ((this.MoneyField.Equals(value) != true)) {
                    this.MoneyField = value;
                    this.RaisePropertyChanged("Money");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickName {
            get {
                return this.NickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameField, value) != true)) {
                    this.NickNameField = value;
                    this.RaisePropertyChanged("NickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PassWord {
            get {
                return this.PassWordField;
            }
            set {
                if ((object.ReferenceEquals(this.PassWordField, value) != true)) {
                    this.PassWordField = value;
                    this.RaisePropertyChanged("PassWord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SchoolId {
            get {
                return this.SchoolIdField;
            }
            set {
                if ((this.SchoolIdField.Equals(value) != true)) {
                    this.SchoolIdField = value;
                    this.RaisePropertyChanged("SchoolId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SchoolName {
            get {
                return this.SchoolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SchoolNameField, value) != true)) {
                    this.SchoolNameField = value;
                    this.RaisePropertyChanged("SchoolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Sex {
            get {
                return this.SexField;
            }
            set {
                if ((this.SexField.Equals(value) != true)) {
                    this.SexField = value;
                    this.RaisePropertyChanged("Sex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Style {
            get {
                return this.StyleField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleField, value) != true)) {
                    this.StyleField = value;
                    this.RaisePropertyChanged("Style");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StyleType {
            get {
                return this.StyleTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.StyleTypeField, value) != true)) {
                    this.StyleTypeField = value;
                    this.RaisePropertyChanged("StyleType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TrueName {
            get {
                return this.TrueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TrueNameField, value) != true)) {
                    this.TrueNameField = value;
                    this.RaisePropertyChanged("TrueName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserSign {
            get {
                return this.UserSignField;
            }
            set {
                if ((object.ReferenceEquals(this.UserSignField, value) != true)) {
                    this.UserSignField = value;
                    this.RaisePropertyChanged("UserSign");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RService.IPlayerService")]
    public interface IPlayerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/Login", ReplyAction="http://tempuri.org/IPlayerService/LoginResponse")]
        MultiThreadTest.RService.PlayerInfo Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPlayerService/Login", ReplyAction="http://tempuri.org/IPlayerService/LoginResponse")]
        System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState);
        
        MultiThreadTest.RService.PlayerInfo EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetPlayerFriends", ReplyAction="http://tempuri.org/IPlayerService/GetPlayerFriendsResponse")]
        MultiThreadTest.RService.PlayerInfo[] GetPlayerFriends(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPlayerService/GetPlayerFriends", ReplyAction="http://tempuri.org/IPlayerService/GetPlayerFriendsResponse")]
        System.IAsyncResult BeginGetPlayerFriends(System.Guid id, System.AsyncCallback callback, object asyncState);
        
        MultiThreadTest.RService.PlayerInfo[] EndGetPlayerFriends(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetPlayerFriendsOwerId", ReplyAction="http://tempuri.org/IPlayerService/GetPlayerFriendsOwerIdResponse")]
        int[] GetPlayerFriendsOwerId(int id, int state);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPlayerService/GetPlayerFriendsOwerId", ReplyAction="http://tempuri.org/IPlayerService/GetPlayerFriendsOwerIdResponse")]
        System.IAsyncResult BeginGetPlayerFriendsOwerId(int id, int state, System.AsyncCallback callback, object asyncState);
        
        int[] EndGetPlayerFriendsOwerId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/UpdatePlayer", ReplyAction="http://tempuri.org/IPlayerService/UpdatePlayerResponse")]
        bool UpdatePlayer(MultiThreadTest.RService.PlayerInfo player);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPlayerService/UpdatePlayer", ReplyAction="http://tempuri.org/IPlayerService/UpdatePlayerResponse")]
        System.IAsyncResult BeginUpdatePlayer(MultiThreadTest.RService.PlayerInfo player, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdatePlayer(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IPlayerServiceChannel : MultiThreadTest.RService.IPlayerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MultiThreadTest.RService.PlayerInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MultiThreadTest.RService.PlayerInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetPlayerFriendsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPlayerFriendsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MultiThreadTest.RService.PlayerInfo[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MultiThreadTest.RService.PlayerInfo[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetPlayerFriendsOwerIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPlayerFriendsOwerIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class UpdatePlayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdatePlayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class PlayerServiceClient : System.ServiceModel.ClientBase<MultiThreadTest.RService.IPlayerService>, MultiThreadTest.RService.IPlayerService {
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPlayerFriendsDelegate;
        
        private EndOperationDelegate onEndGetPlayerFriendsDelegate;
        
        private System.Threading.SendOrPostCallback onGetPlayerFriendsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPlayerFriendsOwerIdDelegate;
        
        private EndOperationDelegate onEndGetPlayerFriendsOwerIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetPlayerFriendsOwerIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdatePlayerDelegate;
        
        private EndOperationDelegate onEndUpdatePlayerDelegate;
        
        private System.Threading.SendOrPostCallback onUpdatePlayerCompletedDelegate;
        
        public PlayerServiceClient() {
        }
        
        public PlayerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<GetPlayerFriendsCompletedEventArgs> GetPlayerFriendsCompleted;
        
        public event System.EventHandler<GetPlayerFriendsOwerIdCompletedEventArgs> GetPlayerFriendsOwerIdCompleted;
        
        public event System.EventHandler<UpdatePlayerCompletedEventArgs> UpdatePlayerCompleted;
        
        public MultiThreadTest.RService.PlayerInfo Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MultiThreadTest.RService.PlayerInfo EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginLogin(username, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            MultiThreadTest.RService.PlayerInfo retVal = this.EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string username, string password) {
            this.LoginAsync(username, password, null);
        }
        
        public void LoginAsync(string username, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        username,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        public MultiThreadTest.RService.PlayerInfo[] GetPlayerFriends(System.Guid id) {
            return base.Channel.GetPlayerFriends(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPlayerFriends(System.Guid id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPlayerFriends(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MultiThreadTest.RService.PlayerInfo[] EndGetPlayerFriends(System.IAsyncResult result) {
            return base.Channel.EndGetPlayerFriends(result);
        }
        
        private System.IAsyncResult OnBeginGetPlayerFriends(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            return this.BeginGetPlayerFriends(id, callback, asyncState);
        }
        
        private object[] OnEndGetPlayerFriends(System.IAsyncResult result) {
            MultiThreadTest.RService.PlayerInfo[] retVal = this.EndGetPlayerFriends(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPlayerFriendsCompleted(object state) {
            if ((this.GetPlayerFriendsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPlayerFriendsCompleted(this, new GetPlayerFriendsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPlayerFriendsAsync(System.Guid id) {
            this.GetPlayerFriendsAsync(id, null);
        }
        
        public void GetPlayerFriendsAsync(System.Guid id, object userState) {
            if ((this.onBeginGetPlayerFriendsDelegate == null)) {
                this.onBeginGetPlayerFriendsDelegate = new BeginOperationDelegate(this.OnBeginGetPlayerFriends);
            }
            if ((this.onEndGetPlayerFriendsDelegate == null)) {
                this.onEndGetPlayerFriendsDelegate = new EndOperationDelegate(this.OnEndGetPlayerFriends);
            }
            if ((this.onGetPlayerFriendsCompletedDelegate == null)) {
                this.onGetPlayerFriendsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPlayerFriendsCompleted);
            }
            base.InvokeAsync(this.onBeginGetPlayerFriendsDelegate, new object[] {
                        id}, this.onEndGetPlayerFriendsDelegate, this.onGetPlayerFriendsCompletedDelegate, userState);
        }
        
        public int[] GetPlayerFriendsOwerId(int id, int state) {
            return base.Channel.GetPlayerFriendsOwerId(id, state);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPlayerFriendsOwerId(int id, int state, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPlayerFriendsOwerId(id, state, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int[] EndGetPlayerFriendsOwerId(System.IAsyncResult result) {
            return base.Channel.EndGetPlayerFriendsOwerId(result);
        }
        
        private System.IAsyncResult OnBeginGetPlayerFriendsOwerId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            int state = ((int)(inValues[1]));
            return this.BeginGetPlayerFriendsOwerId(id, state, callback, asyncState);
        }
        
        private object[] OnEndGetPlayerFriendsOwerId(System.IAsyncResult result) {
            int[] retVal = this.EndGetPlayerFriendsOwerId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPlayerFriendsOwerIdCompleted(object state) {
            if ((this.GetPlayerFriendsOwerIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPlayerFriendsOwerIdCompleted(this, new GetPlayerFriendsOwerIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPlayerFriendsOwerIdAsync(int id, int state) {
            this.GetPlayerFriendsOwerIdAsync(id, state, null);
        }
        
        public void GetPlayerFriendsOwerIdAsync(int id, int state, object userState) {
            if ((this.onBeginGetPlayerFriendsOwerIdDelegate == null)) {
                this.onBeginGetPlayerFriendsOwerIdDelegate = new BeginOperationDelegate(this.OnBeginGetPlayerFriendsOwerId);
            }
            if ((this.onEndGetPlayerFriendsOwerIdDelegate == null)) {
                this.onEndGetPlayerFriendsOwerIdDelegate = new EndOperationDelegate(this.OnEndGetPlayerFriendsOwerId);
            }
            if ((this.onGetPlayerFriendsOwerIdCompletedDelegate == null)) {
                this.onGetPlayerFriendsOwerIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPlayerFriendsOwerIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetPlayerFriendsOwerIdDelegate, new object[] {
                        id,
                        state}, this.onEndGetPlayerFriendsOwerIdDelegate, this.onGetPlayerFriendsOwerIdCompletedDelegate, userState);
        }
        
        public bool UpdatePlayer(MultiThreadTest.RService.PlayerInfo player) {
            return base.Channel.UpdatePlayer(player);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdatePlayer(MultiThreadTest.RService.PlayerInfo player, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdatePlayer(player, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdatePlayer(System.IAsyncResult result) {
            return base.Channel.EndUpdatePlayer(result);
        }
        
        private System.IAsyncResult OnBeginUpdatePlayer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MultiThreadTest.RService.PlayerInfo player = ((MultiThreadTest.RService.PlayerInfo)(inValues[0]));
            return this.BeginUpdatePlayer(player, callback, asyncState);
        }
        
        private object[] OnEndUpdatePlayer(System.IAsyncResult result) {
            bool retVal = this.EndUpdatePlayer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdatePlayerCompleted(object state) {
            if ((this.UpdatePlayerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdatePlayerCompleted(this, new UpdatePlayerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdatePlayerAsync(MultiThreadTest.RService.PlayerInfo player) {
            this.UpdatePlayerAsync(player, null);
        }
        
        public void UpdatePlayerAsync(MultiThreadTest.RService.PlayerInfo player, object userState) {
            if ((this.onBeginUpdatePlayerDelegate == null)) {
                this.onBeginUpdatePlayerDelegate = new BeginOperationDelegate(this.OnBeginUpdatePlayer);
            }
            if ((this.onEndUpdatePlayerDelegate == null)) {
                this.onEndUpdatePlayerDelegate = new EndOperationDelegate(this.OnEndUpdatePlayer);
            }
            if ((this.onUpdatePlayerCompletedDelegate == null)) {
                this.onUpdatePlayerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdatePlayerCompleted);
            }
            base.InvokeAsync(this.onBeginUpdatePlayerDelegate, new object[] {
                        player}, this.onEndUpdatePlayerDelegate, this.onUpdatePlayerCompletedDelegate, userState);
        }
    }
}
