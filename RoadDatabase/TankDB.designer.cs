#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoadDatabase
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Db_Tank")]
	public partial class TankDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGame_Map_Po(Game_Map_Po instance);
    partial void UpdateGame_Map_Po(Game_Map_Po instance);
    partial void DeleteGame_Map_Po(Game_Map_Po instance);
    partial void InsertMap_Good(Map_Good instance);
    partial void UpdateMap_Good(Map_Good instance);
    partial void DeleteMap_Good(Map_Good instance);
    partial void InsertServer_List(Server_List instance);
    partial void UpdateServer_List(Server_List instance);
    partial void DeleteServer_List(Server_List instance);
    partial void InsertShop(Shop instance);
    partial void UpdateShop(Shop instance);
    partial void DeleteShop(Shop instance);
    partial void InsertShop_Goods_Category(Shop_Goods_Category instance);
    partial void UpdateShop_Goods_Category(Shop_Goods_Category instance);
    partial void DeleteShop_Goods_Category(Shop_Goods_Category instance);
    partial void InsertSys_Users_Friend(Sys_Users_Friend instance);
    partial void UpdateSys_Users_Friend(Sys_Users_Friend instance);
    partial void DeleteSys_Users_Friend(Sys_Users_Friend instance);
    partial void InsertConsortia(Consortia instance);
    partial void UpdateConsortia(Consortia instance);
    partial void DeleteConsortia(Consortia instance);
    partial void InsertConsortia_User(Consortia_User instance);
    partial void UpdateConsortia_User(Consortia_User instance);
    partial void DeleteConsortia_User(Consortia_User instance);
    partial void InsertConsortia_Apply(Consortia_Apply instance);
    partial void UpdateConsortia_Apply(Consortia_Apply instance);
    partial void DeleteConsortia_Apply(Consortia_Apply instance);
    partial void InsertConsortia_Organise(Consortia_Organise instance);
    partial void UpdateConsortia_Organise(Consortia_Organise instance);
    partial void DeleteConsortia_Organise(Consortia_Organise instance);
    partial void InsertSys_Users_Good(Sys_Users_Good instance);
    partial void UpdateSys_Users_Good(Sys_Users_Good instance);
    partial void DeleteSys_Users_Good(Sys_Users_Good instance);
    partial void InsertShop_Good(Shop_Good instance);
    partial void UpdateShop_Good(Shop_Good instance);
    partial void DeleteShop_Good(Shop_Good instance);
    partial void InsertSys_Users_Fight(Sys_Users_Fight instance);
    partial void UpdateSys_Users_Fight(Sys_Users_Fight instance);
    partial void DeleteSys_Users_Fight(Sys_Users_Fight instance);
    partial void InsertSys_Users_Detail(Sys_Users_Detail instance);
    partial void UpdateSys_Users_Detail(Sys_Users_Detail instance);
    partial void DeleteSys_Users_Detail(Sys_Users_Detail instance);
    partial void InsertQuest(Quest instance);
    partial void UpdateQuest(Quest instance);
    partial void DeleteQuest(Quest instance);
    partial void InsertQuestData(QuestData instance);
    partial void UpdateQuestData(QuestData instance);
    partial void DeleteQuestData(QuestData instance);
    partial void InsertGame_Map(Game_Map instance);
    partial void UpdateGame_Map(Game_Map instance);
    partial void DeleteGame_Map(Game_Map instance);
    partial void InsertBall(Ball instance);
    partial void UpdateBall(Ball instance);
    partial void DeleteBall(Ball instance);
    partial void InsertUser_Message(User_Message instance);
    partial void UpdateUser_Message(User_Message instance);
    partial void DeleteUser_Message(User_Message instance);
    #endregion
		
		public TankDBDataContext() : 
				base(global::RoadDatabase.Properties.Settings.Default.Db_TankConnectionString5, mappingSource)
		{
			OnCreated();
		}
		
		public TankDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TankDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TankDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TankDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Game_Map_Po> Game_Map_Pos
		{
			get
			{
				return this.GetTable<Game_Map_Po>();
			}
		}
		
		public System.Data.Linq.Table<Map_Good> Map_Goods
		{
			get
			{
				return this.GetTable<Map_Good>();
			}
		}
		
		public System.Data.Linq.Table<Server_List> Server_Lists
		{
			get
			{
				return this.GetTable<Server_List>();
			}
		}
		
		public System.Data.Linq.Table<Shop> Shops
		{
			get
			{
				return this.GetTable<Shop>();
			}
		}
		
		public System.Data.Linq.Table<Shop_Goods_Category> Shop_Goods_Categories
		{
			get
			{
				return this.GetTable<Shop_Goods_Category>();
			}
		}
		
		public System.Data.Linq.Table<Sys_Users_Friend> Sys_Users_Friends
		{
			get
			{
				return this.GetTable<Sys_Users_Friend>();
			}
		}
		
		public System.Data.Linq.Table<Consortia> Consortias
		{
			get
			{
				return this.GetTable<Consortia>();
			}
		}
		
		public System.Data.Linq.Table<Consortia_User> Consortia_Users
		{
			get
			{
				return this.GetTable<Consortia_User>();
			}
		}
		
		public System.Data.Linq.Table<Consortia_Apply> Consortia_Applies
		{
			get
			{
				return this.GetTable<Consortia_Apply>();
			}
		}
		
		public System.Data.Linq.Table<Consortia_Organise> Consortia_Organises
		{
			get
			{
				return this.GetTable<Consortia_Organise>();
			}
		}
		
		public System.Data.Linq.Table<Sys_Users_Good> Sys_Users_Goods
		{
			get
			{
				return this.GetTable<Sys_Users_Good>();
			}
		}
		
		public System.Data.Linq.Table<Shop_Good> Shop_Goods
		{
			get
			{
				return this.GetTable<Shop_Good>();
			}
		}
		
		public System.Data.Linq.Table<Sys_Users_Fight> Sys_Users_Fights
		{
			get
			{
				return this.GetTable<Sys_Users_Fight>();
			}
		}
		
		public System.Data.Linq.Table<Sys_Users_Detail> Sys_Users_Details
		{
			get
			{
				return this.GetTable<Sys_Users_Detail>();
			}
		}
		
		public System.Data.Linq.Table<Quest> Quests
		{
			get
			{
				return this.GetTable<Quest>();
			}
		}
		
		public System.Data.Linq.Table<QuestData> QuestDatas
		{
			get
			{
				return this.GetTable<QuestData>();
			}
		}
		
		public System.Data.Linq.Table<Game_Map> Game_Maps
		{
			get
			{
				return this.GetTable<Game_Map>();
			}
		}
		
		public System.Data.Linq.Table<Ball> Balls
		{
			get
			{
				return this.GetTable<Ball>();
			}
		}
		
		public System.Data.Linq.Table<User_Message> User_Messages
		{
			get
			{
				return this.GetTable<User_Message>();
			}
		}
	}
	
	[Table(Name="dbo.Game_Map_Pos")]
	public partial class Game_Map_Po : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _MapID;
		
		private System.Nullable<int> _PosX;
		
		private System.Nullable<int> _PosY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMapIDChanging(System.Nullable<int> value);
    partial void OnMapIDChanged();
    partial void OnPosXChanging(System.Nullable<int> value);
    partial void OnPosXChanged();
    partial void OnPosYChanging(System.Nullable<int> value);
    partial void OnPosYChanged();
    #endregion
		
		public Game_Map_Po()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MapID", DbType="Int")]
		public System.Nullable<int> MapID
		{
			get
			{
				return this._MapID;
			}
			set
			{
				if ((this._MapID != value))
				{
					this.OnMapIDChanging(value);
					this.SendPropertyChanging();
					this._MapID = value;
					this.SendPropertyChanged("MapID");
					this.OnMapIDChanged();
				}
			}
		}
		
		[Column(Storage="_PosX", DbType="Int")]
		public System.Nullable<int> PosX
		{
			get
			{
				return this._PosX;
			}
			set
			{
				if ((this._PosX != value))
				{
					this.OnPosXChanging(value);
					this.SendPropertyChanging();
					this._PosX = value;
					this.SendPropertyChanged("PosX");
					this.OnPosXChanged();
				}
			}
		}
		
		[Column(Storage="_PosY", DbType="Int")]
		public System.Nullable<int> PosY
		{
			get
			{
				return this._PosY;
			}
			set
			{
				if ((this._PosY != value))
				{
					this.OnPosYChanging(value);
					this.SendPropertyChanging();
					this._PosY = value;
					this.SendPropertyChanged("PosY");
					this.OnPosYChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Map_Goods")]
	public partial class Map_Good : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MapID;
		
		private int _GoodsID;
		
		private int _Random;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMapIDChanging(int value);
    partial void OnMapIDChanged();
    partial void OnGoodsIDChanging(int value);
    partial void OnGoodsIDChanged();
    partial void OnRandomChanging(int value);
    partial void OnRandomChanged();
    #endregion
		
		public Map_Good()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MapID", DbType="Int NOT NULL")]
		public int MapID
		{
			get
			{
				return this._MapID;
			}
			set
			{
				if ((this._MapID != value))
				{
					this.OnMapIDChanging(value);
					this.SendPropertyChanging();
					this._MapID = value;
					this.SendPropertyChanged("MapID");
					this.OnMapIDChanged();
				}
			}
		}
		
		[Column(Storage="_GoodsID", DbType="Int NOT NULL")]
		public int GoodsID
		{
			get
			{
				return this._GoodsID;
			}
			set
			{
				if ((this._GoodsID != value))
				{
					this.OnGoodsIDChanging(value);
					this.SendPropertyChanging();
					this._GoodsID = value;
					this.SendPropertyChanged("GoodsID");
					this.OnGoodsIDChanged();
				}
			}
		}
		
		[Column(Storage="_Random", DbType="Int NOT NULL")]
		public int Random
		{
			get
			{
				return this._Random;
			}
			set
			{
				if ((this._Random != value))
				{
					this.OnRandomChanging(value);
					this.SendPropertyChanging();
					this._Random = value;
					this.SendPropertyChanged("Random");
					this.OnRandomChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Server_List")]
	public partial class Server_List : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _IP;
		
		private System.Nullable<int> _Port;
		
		private int _State;
		
		private int _Online;
		
		private int _Total;
		
		private int _Room;
		
		private string _Remark;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnPortChanging(System.Nullable<int> value);
    partial void OnPortChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnOnlineChanging(int value);
    partial void OnOnlineChanged();
    partial void OnTotalChanging(int value);
    partial void OnTotalChanged();
    partial void OnRoomChanging(int value);
    partial void OnRoomChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public Server_List()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_IP", DbType="NVarChar(50)")]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[Column(Storage="_Port", DbType="Int")]
		public System.Nullable<int> Port
		{
			get
			{
				return this._Port;
			}
			set
			{
				if ((this._Port != value))
				{
					this.OnPortChanging(value);
					this.SendPropertyChanging();
					this._Port = value;
					this.SendPropertyChanged("Port");
					this.OnPortChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="Int NOT NULL")]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_Online", DbType="Int NOT NULL")]
		public int Online
		{
			get
			{
				return this._Online;
			}
			set
			{
				if ((this._Online != value))
				{
					this.OnOnlineChanging(value);
					this.SendPropertyChanging();
					this._Online = value;
					this.SendPropertyChanged("Online");
					this.OnOnlineChanged();
				}
			}
		}
		
		[Column(Storage="_Total", DbType="Int NOT NULL")]
		public int Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[Column(Storage="_Room", DbType="Int NOT NULL")]
		public int Room
		{
			get
			{
				return this._Room;
			}
			set
			{
				if ((this._Room != value))
				{
					this.OnRoomChanging(value);
					this.SendPropertyChanging();
					this._Room = value;
					this.SendPropertyChanged("Room");
					this.OnRoomChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Shop")]
	public partial class Shop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ShopID;
		
		private System.Nullable<int> _GoodsID;
		
		private System.Nullable<int> _Count;
		
		private System.Nullable<int> _Sort;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnShopIDChanging(System.Nullable<int> value);
    partial void OnShopIDChanged();
    partial void OnGoodsIDChanging(System.Nullable<int> value);
    partial void OnGoodsIDChanged();
    partial void OnCountChanging(System.Nullable<int> value);
    partial void OnCountChanged();
    partial void OnSortChanging(System.Nullable<int> value);
    partial void OnSortChanged();
    #endregion
		
		public Shop()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShopID", DbType="Int")]
		public System.Nullable<int> ShopID
		{
			get
			{
				return this._ShopID;
			}
			set
			{
				if ((this._ShopID != value))
				{
					this.OnShopIDChanging(value);
					this.SendPropertyChanging();
					this._ShopID = value;
					this.SendPropertyChanged("ShopID");
					this.OnShopIDChanged();
				}
			}
		}
		
		[Column(Storage="_GoodsID", DbType="Int")]
		public System.Nullable<int> GoodsID
		{
			get
			{
				return this._GoodsID;
			}
			set
			{
				if ((this._GoodsID != value))
				{
					this.OnGoodsIDChanging(value);
					this.SendPropertyChanging();
					this._GoodsID = value;
					this.SendPropertyChanged("GoodsID");
					this.OnGoodsIDChanged();
				}
			}
		}
		
		[Column(Storage="_Count", DbType="Int")]
		public System.Nullable<int> Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Column(Storage="_Sort", DbType="Int")]
		public System.Nullable<int> Sort
		{
			get
			{
				return this._Sort;
			}
			set
			{
				if ((this._Sort != value))
				{
					this.OnSortChanging(value);
					this.SendPropertyChanging();
					this._Sort = value;
					this.SendPropertyChanged("Sort");
					this.OnSortChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Shop_Goods_Categorys")]
	public partial class Shop_Goods_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _Place;
		
		private string _Remark;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPlaceChanging(System.Nullable<int> value);
    partial void OnPlaceChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public Shop_Goods_Category()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Place", DbType="Int")]
		public System.Nullable<int> Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Sys_Users_Friends")]
	public partial class Sys_Users_Friend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _FriendID;
		
		private System.Nullable<System.DateTime> _AddDate;
		
		private string _Remark;
		
		private bool _IsExist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFriendIDChanging(int value);
    partial void OnFriendIDChanged();
    partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddDateChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnIsExistChanging(bool value);
    partial void OnIsExistChanged();
    #endregion
		
		public Sys_Users_Friend()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_FriendID", DbType="Int NOT NULL")]
		public int FriendID
		{
			get
			{
				return this._FriendID;
			}
			set
			{
				if ((this._FriendID != value))
				{
					this.OnFriendIDChanging(value);
					this.SendPropertyChanging();
					this._FriendID = value;
					this.SendPropertyChanged("FriendID");
					this.OnFriendIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddDate
		{
			get
			{
				return this._AddDate;
			}
			set
			{
				if ((this._AddDate != value))
				{
					this.OnAddDateChanging(value);
					this.SendPropertyChanging();
					this._AddDate = value;
					this.SendPropertyChanged("AddDate");
					this.OnAddDateChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_IsExist", DbType="Bit NOT NULL")]
		public bool IsExist
		{
			get
			{
				return this._IsExist;
			}
			set
			{
				if ((this._IsExist != value))
				{
					this.OnIsExistChanging(value);
					this.SendPropertyChanging();
					this._IsExist = value;
					this.SendPropertyChanged("IsExist");
					this.OnIsExistChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Consortia")]
	public partial class Consortia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Medal;
		
		private string _Icon;
		
		private string _Description;
		
		private int _UserID;
		
		private System.DateTime _BuildDate;
		
		private bool _IsOpen;
		
		private int _Count;
		
		private int _GP;
		
		private string _Notice;
		
		private int _LimitCount;
		
		private string _Pic;
		
		private string _IP;
		
		private string _Port;
		
		private bool _IsExist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMedalChanging(string value);
    partial void OnMedalChanged();
    partial void OnIconChanging(string value);
    partial void OnIconChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnBuildDateChanging(System.DateTime value);
    partial void OnBuildDateChanged();
    partial void OnIsOpenChanging(bool value);
    partial void OnIsOpenChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    partial void OnGPChanging(int value);
    partial void OnGPChanged();
    partial void OnNoticeChanging(string value);
    partial void OnNoticeChanged();
    partial void OnLimitCountChanging(int value);
    partial void OnLimitCountChanged();
    partial void OnPicChanging(string value);
    partial void OnPicChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnPortChanging(string value);
    partial void OnPortChanged();
    partial void OnIsExistChanging(bool value);
    partial void OnIsExistChanged();
    #endregion
		
		public Consortia()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Medal", DbType="NVarChar(50)")]
		public string Medal
		{
			get
			{
				return this._Medal;
			}
			set
			{
				if ((this._Medal != value))
				{
					this.OnMedalChanging(value);
					this.SendPropertyChanging();
					this._Medal = value;
					this.SendPropertyChanged("Medal");
					this.OnMedalChanged();
				}
			}
		}
		
		[Column(Storage="_Icon", DbType="NVarChar(50)")]
		public string Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_BuildDate", DbType="DateTime NOT NULL")]
		public System.DateTime BuildDate
		{
			get
			{
				return this._BuildDate;
			}
			set
			{
				if ((this._BuildDate != value))
				{
					this.OnBuildDateChanging(value);
					this.SendPropertyChanging();
					this._BuildDate = value;
					this.SendPropertyChanged("BuildDate");
					this.OnBuildDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsOpen", DbType="Bit NOT NULL")]
		public bool IsOpen
		{
			get
			{
				return this._IsOpen;
			}
			set
			{
				if ((this._IsOpen != value))
				{
					this.OnIsOpenChanging(value);
					this.SendPropertyChanging();
					this._IsOpen = value;
					this.SendPropertyChanged("IsOpen");
					this.OnIsOpenChanged();
				}
			}
		}
		
		[Column(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Column(Storage="_GP", DbType="Int NOT NULL")]
		public int GP
		{
			get
			{
				return this._GP;
			}
			set
			{
				if ((this._GP != value))
				{
					this.OnGPChanging(value);
					this.SendPropertyChanging();
					this._GP = value;
					this.SendPropertyChanged("GP");
					this.OnGPChanged();
				}
			}
		}
		
		[Column(Storage="_Notice", DbType="NVarChar(2000)")]
		public string Notice
		{
			get
			{
				return this._Notice;
			}
			set
			{
				if ((this._Notice != value))
				{
					this.OnNoticeChanging(value);
					this.SendPropertyChanging();
					this._Notice = value;
					this.SendPropertyChanged("Notice");
					this.OnNoticeChanged();
				}
			}
		}
		
		[Column(Storage="_LimitCount", DbType="Int NOT NULL")]
		public int LimitCount
		{
			get
			{
				return this._LimitCount;
			}
			set
			{
				if ((this._LimitCount != value))
				{
					this.OnLimitCountChanging(value);
					this.SendPropertyChanging();
					this._LimitCount = value;
					this.SendPropertyChanged("LimitCount");
					this.OnLimitCountChanged();
				}
			}
		}
		
		[Column(Storage="_Pic", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Pic
		{
			get
			{
				return this._Pic;
			}
			set
			{
				if ((this._Pic != value))
				{
					this.OnPicChanging(value);
					this.SendPropertyChanging();
					this._Pic = value;
					this.SendPropertyChanged("Pic");
					this.OnPicChanged();
				}
			}
		}
		
		[Column(Storage="_IP", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[Column(Storage="_Port", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Port
		{
			get
			{
				return this._Port;
			}
			set
			{
				if ((this._Port != value))
				{
					this.OnPortChanging(value);
					this.SendPropertyChanging();
					this._Port = value;
					this.SendPropertyChanged("Port");
					this.OnPortChanged();
				}
			}
		}
		
		[Column(Storage="_IsExist", DbType="Bit NOT NULL")]
		public bool IsExist
		{
			get
			{
				return this._IsExist;
			}
			set
			{
				if ((this._IsExist != value))
				{
					this.OnIsExistChanging(value);
					this.SendPropertyChanging();
					this._IsExist = value;
					this.SendPropertyChanged("IsExist");
					this.OnIsExistChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Consortia_Users")]
	public partial class Consortia_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ConsortiaID;
		
		private int _UserID;
		
		private int _OrganiseID;
		
		private string _Remark;
		
		private int _Contribute;
		
		private int _PassUserID;
		
		private System.DateTime _EnterDate;
		
		private int _Count;
		
		private bool _IsExist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnConsortiaIDChanging(int value);
    partial void OnConsortiaIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnOrganiseIDChanging(int value);
    partial void OnOrganiseIDChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnContributeChanging(int value);
    partial void OnContributeChanged();
    partial void OnPassUserIDChanging(int value);
    partial void OnPassUserIDChanged();
    partial void OnEnterDateChanging(System.DateTime value);
    partial void OnEnterDateChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    partial void OnIsExistChanging(bool value);
    partial void OnIsExistChanged();
    #endregion
		
		public Consortia_User()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ConsortiaID", DbType="Int NOT NULL")]
		public int ConsortiaID
		{
			get
			{
				return this._ConsortiaID;
			}
			set
			{
				if ((this._ConsortiaID != value))
				{
					this.OnConsortiaIDChanging(value);
					this.SendPropertyChanging();
					this._ConsortiaID = value;
					this.SendPropertyChanged("ConsortiaID");
					this.OnConsortiaIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrganiseID", DbType="Int NOT NULL")]
		public int OrganiseID
		{
			get
			{
				return this._OrganiseID;
			}
			set
			{
				if ((this._OrganiseID != value))
				{
					this.OnOrganiseIDChanging(value);
					this.SendPropertyChanging();
					this._OrganiseID = value;
					this.SendPropertyChanged("OrganiseID");
					this.OnOrganiseIDChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_Contribute", DbType="Int NOT NULL")]
		public int Contribute
		{
			get
			{
				return this._Contribute;
			}
			set
			{
				if ((this._Contribute != value))
				{
					this.OnContributeChanging(value);
					this.SendPropertyChanging();
					this._Contribute = value;
					this.SendPropertyChanged("Contribute");
					this.OnContributeChanged();
				}
			}
		}
		
		[Column(Storage="_PassUserID", DbType="Int NOT NULL")]
		public int PassUserID
		{
			get
			{
				return this._PassUserID;
			}
			set
			{
				if ((this._PassUserID != value))
				{
					this.OnPassUserIDChanging(value);
					this.SendPropertyChanging();
					this._PassUserID = value;
					this.SendPropertyChanged("PassUserID");
					this.OnPassUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_EnterDate", DbType="DateTime NOT NULL")]
		public System.DateTime EnterDate
		{
			get
			{
				return this._EnterDate;
			}
			set
			{
				if ((this._EnterDate != value))
				{
					this.OnEnterDateChanging(value);
					this.SendPropertyChanging();
					this._EnterDate = value;
					this.SendPropertyChanged("EnterDate");
					this.OnEnterDateChanged();
				}
			}
		}
		
		[Column(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Column(Storage="_IsExist", DbType="Bit NOT NULL")]
		public bool IsExist
		{
			get
			{
				return this._IsExist;
			}
			set
			{
				if ((this._IsExist != value))
				{
					this.OnIsExistChanging(value);
					this.SendPropertyChanging();
					this._IsExist = value;
					this.SendPropertyChanged("IsExist");
					this.OnIsExistChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Consortia_Apply")]
	public partial class Consortia_Apply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _Consortia;
		
		private bool _State;
		
		private System.DateTime _Date;
		
		private string _Remark;
		
		private bool _IsExist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnConsortiaChanging(int value);
    partial void OnConsortiaChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnIsExistChanging(bool value);
    partial void OnIsExistChanged();
    #endregion
		
		public Consortia_Apply()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Consortia", DbType="Int NOT NULL")]
		public int Consortia
		{
			get
			{
				return this._Consortia;
			}
			set
			{
				if ((this._Consortia != value))
				{
					this.OnConsortiaChanging(value);
					this.SendPropertyChanging();
					this._Consortia = value;
					this.SendPropertyChanged("Consortia");
					this.OnConsortiaChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="Bit NOT NULL")]
		public bool State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(50)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_IsExist", DbType="Bit NOT NULL")]
		public bool IsExist
		{
			get
			{
				return this._IsExist;
			}
			set
			{
				if ((this._IsExist != value))
				{
					this.OnIsExistChanging(value);
					this.SendPropertyChanging();
					this._IsExist = value;
					this.SendPropertyChanged("IsExist");
					this.OnIsExistChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Consortia_Organise")]
	public partial class Consortia_Organise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ConsortiaID;
		
		private string _Duty;
		
		private int _Count;
		
		private int _Grade;
		
		private int _Right;
		
		private bool _IsExist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnConsortiaIDChanging(int value);
    partial void OnConsortiaIDChanged();
    partial void OnDutyChanging(string value);
    partial void OnDutyChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    partial void OnGradeChanging(int value);
    partial void OnGradeChanged();
    partial void OnRightChanging(int value);
    partial void OnRightChanged();
    partial void OnIsExistChanging(bool value);
    partial void OnIsExistChanged();
    #endregion
		
		public Consortia_Organise()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ConsortiaID", DbType="Int NOT NULL")]
		public int ConsortiaID
		{
			get
			{
				return this._ConsortiaID;
			}
			set
			{
				if ((this._ConsortiaID != value))
				{
					this.OnConsortiaIDChanging(value);
					this.SendPropertyChanging();
					this._ConsortiaID = value;
					this.SendPropertyChanged("ConsortiaID");
					this.OnConsortiaIDChanged();
				}
			}
		}
		
		[Column(Storage="_Duty", DbType="NVarChar(50)")]
		public string Duty
		{
			get
			{
				return this._Duty;
			}
			set
			{
				if ((this._Duty != value))
				{
					this.OnDutyChanging(value);
					this.SendPropertyChanging();
					this._Duty = value;
					this.SendPropertyChanged("Duty");
					this.OnDutyChanged();
				}
			}
		}
		
		[Column(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Column(Storage="_Grade", DbType="Int NOT NULL")]
		public int Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[Column(Name="[Right]", Storage="_Right", DbType="Int NOT NULL")]
		public int Right
		{
			get
			{
				return this._Right;
			}
			set
			{
				if ((this._Right != value))
				{
					this.OnRightChanging(value);
					this.SendPropertyChanging();
					this._Right = value;
					this.SendPropertyChanged("Right");
					this.OnRightChanged();
				}
			}
		}
		
		[Column(Storage="_IsExist", DbType="Bit NOT NULL")]
		public bool IsExist
		{
			get
			{
				return this._IsExist;
			}
			set
			{
				if ((this._IsExist != value))
				{
					this.OnIsExistChanging(value);
					this.SendPropertyChanging();
					this._IsExist = value;
					this.SendPropertyChanged("IsExist");
					this.OnIsExistChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Sys_Users_Goods")]
	public partial class Sys_Users_Good : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemID;
		
		private int _UserID;
		
		private int _TemplateID;
		
		private int _Place;
		
		private int _Count;
		
		private bool _IsJudge;
		
		private string _Color;
		
		private bool _IsExist;
		
		private int _StrengthenLevel;
		
		private int _AttackCompose;
		
		private int _DefendCompose;
		
		private int _LuckCompose;
		
		private int _AgilityCompose;
		
		private bool _IsBinds;
		
		private System.DateTime _BeginDate;
		
		private int _ValidDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTemplateIDChanging(int value);
    partial void OnTemplateIDChanged();
    partial void OnPlaceChanging(int value);
    partial void OnPlaceChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    partial void OnIsJudgeChanging(bool value);
    partial void OnIsJudgeChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnIsExistChanging(bool value);
    partial void OnIsExistChanged();
    partial void OnStrengthenLevelChanging(int value);
    partial void OnStrengthenLevelChanged();
    partial void OnAttackComposeChanging(int value);
    partial void OnAttackComposeChanged();
    partial void OnDefendComposeChanging(int value);
    partial void OnDefendComposeChanged();
    partial void OnLuckComposeChanging(int value);
    partial void OnLuckComposeChanged();
    partial void OnAgilityComposeChanging(int value);
    partial void OnAgilityComposeChanged();
    partial void OnIsBindsChanging(bool value);
    partial void OnIsBindsChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnValidDateChanging(int value);
    partial void OnValidDateChanged();
    #endregion
		
		public Sys_Users_Good()
		{
			OnCreated();
		}
		
		[Column(Storage="_ItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_TemplateID", DbType="Int NOT NULL")]
		public int TemplateID
		{
			get
			{
				return this._TemplateID;
			}
			set
			{
				if ((this._TemplateID != value))
				{
					this.OnTemplateIDChanging(value);
					this.SendPropertyChanging();
					this._TemplateID = value;
					this.SendPropertyChanged("TemplateID");
					this.OnTemplateIDChanged();
				}
			}
		}
		
		[Column(Storage="_Place", DbType="Int NOT NULL")]
		public int Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Column(Storage="_IsJudge", DbType="Bit NOT NULL")]
		public bool IsJudge
		{
			get
			{
				return this._IsJudge;
			}
			set
			{
				if ((this._IsJudge != value))
				{
					this.OnIsJudgeChanging(value);
					this.SendPropertyChanging();
					this._IsJudge = value;
					this.SendPropertyChanged("IsJudge");
					this.OnIsJudgeChanged();
				}
			}
		}
		
		[Column(Storage="_Color", DbType="NVarChar(50)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[Column(Storage="_IsExist", DbType="Bit NOT NULL")]
		public bool IsExist
		{
			get
			{
				return this._IsExist;
			}
			set
			{
				if ((this._IsExist != value))
				{
					this.OnIsExistChanging(value);
					this.SendPropertyChanging();
					this._IsExist = value;
					this.SendPropertyChanged("IsExist");
					this.OnIsExistChanged();
				}
			}
		}
		
		[Column(Storage="_StrengthenLevel", DbType="Int NOT NULL")]
		public int StrengthenLevel
		{
			get
			{
				return this._StrengthenLevel;
			}
			set
			{
				if ((this._StrengthenLevel != value))
				{
					this.OnStrengthenLevelChanging(value);
					this.SendPropertyChanging();
					this._StrengthenLevel = value;
					this.SendPropertyChanged("StrengthenLevel");
					this.OnStrengthenLevelChanged();
				}
			}
		}
		
		[Column(Storage="_AttackCompose", DbType="Int NOT NULL")]
		public int AttackCompose
		{
			get
			{
				return this._AttackCompose;
			}
			set
			{
				if ((this._AttackCompose != value))
				{
					this.OnAttackComposeChanging(value);
					this.SendPropertyChanging();
					this._AttackCompose = value;
					this.SendPropertyChanged("AttackCompose");
					this.OnAttackComposeChanged();
				}
			}
		}
		
		[Column(Storage="_DefendCompose", DbType="Int NOT NULL")]
		public int DefendCompose
		{
			get
			{
				return this._DefendCompose;
			}
			set
			{
				if ((this._DefendCompose != value))
				{
					this.OnDefendComposeChanging(value);
					this.SendPropertyChanging();
					this._DefendCompose = value;
					this.SendPropertyChanged("DefendCompose");
					this.OnDefendComposeChanged();
				}
			}
		}
		
		[Column(Storage="_LuckCompose", DbType="Int NOT NULL")]
		public int LuckCompose
		{
			get
			{
				return this._LuckCompose;
			}
			set
			{
				if ((this._LuckCompose != value))
				{
					this.OnLuckComposeChanging(value);
					this.SendPropertyChanging();
					this._LuckCompose = value;
					this.SendPropertyChanged("LuckCompose");
					this.OnLuckComposeChanged();
				}
			}
		}
		
		[Column(Storage="_AgilityCompose", DbType="Int NOT NULL")]
		public int AgilityCompose
		{
			get
			{
				return this._AgilityCompose;
			}
			set
			{
				if ((this._AgilityCompose != value))
				{
					this.OnAgilityComposeChanging(value);
					this.SendPropertyChanging();
					this._AgilityCompose = value;
					this.SendPropertyChanged("AgilityCompose");
					this.OnAgilityComposeChanged();
				}
			}
		}
		
		[Column(Storage="_IsBinds", DbType="Bit NOT NULL")]
		public bool IsBinds
		{
			get
			{
				return this._IsBinds;
			}
			set
			{
				if ((this._IsBinds != value))
				{
					this.OnIsBindsChanging(value);
					this.SendPropertyChanging();
					this._IsBinds = value;
					this.SendPropertyChanged("IsBinds");
					this.OnIsBindsChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_ValidDate", DbType="Int NOT NULL")]
		public int ValidDate
		{
			get
			{
				return this._ValidDate;
			}
			set
			{
				if ((this._ValidDate != value))
				{
					this.OnValidDateChanging(value);
					this.SendPropertyChanging();
					this._ValidDate = value;
					this.SendPropertyChanged("ValidDate");
					this.OnValidDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Shop_Goods")]
	public partial class Shop_Good : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TemplateID;
		
		private string _Name;
		
		private int _CategoryID;
		
		private string _Description;
		
		private int _Attack;
		
		private int _Defence;
		
		private int _Luck;
		
		private int _Agility;
		
		private int _Level;
		
		private string _Pic;
		
		private System.Nullable<System.DateTime> _AddTime;
		
		private int _Gold;
		
		private int _Money;
		
		private int _MaxCount;
		
		private int _Property1;
		
		private int _Property2;
		
		private int _Property3;
		
		private int _Property4;
		
		private int _Property5;
		
		private int _Property6;
		
		private int _Property7;
		
		private int _Property8;
		
		private int _Quality;
		
		private int _Valid;
		
		private int _NeedSex;
		
		private bool _CanDrop;
		
		private bool _CanDelete;
		
		private bool _CanEquip;
		
		private bool _CanUse;
		
		private string _Script;
		
		private string _Data;
		
		private int _Count;
		
		private string _Remark;
		
		private string _Colors;
		
		private bool _IsVouch;
		
		private bool _CanStrengthen;
		
		private bool _CanCompose;
		
		private int _NeedLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTemplateIDChanging(int value);
    partial void OnTemplateIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAttackChanging(int value);
    partial void OnAttackChanged();
    partial void OnDefenceChanging(int value);
    partial void OnDefenceChanged();
    partial void OnLuckChanging(int value);
    partial void OnLuckChanged();
    partial void OnAgilityChanging(int value);
    partial void OnAgilityChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnPicChanging(string value);
    partial void OnPicChanged();
    partial void OnAddTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnAddTimeChanged();
    partial void OnGoldChanging(int value);
    partial void OnGoldChanged();
    partial void OnMoneyChanging(int value);
    partial void OnMoneyChanged();
    partial void OnMaxCountChanging(int value);
    partial void OnMaxCountChanged();
    partial void OnProperty1Changing(int value);
    partial void OnProperty1Changed();
    partial void OnProperty2Changing(int value);
    partial void OnProperty2Changed();
    partial void OnProperty3Changing(int value);
    partial void OnProperty3Changed();
    partial void OnProperty4Changing(int value);
    partial void OnProperty4Changed();
    partial void OnProperty5Changing(int value);
    partial void OnProperty5Changed();
    partial void OnProperty6Changing(int value);
    partial void OnProperty6Changed();
    partial void OnProperty7Changing(int value);
    partial void OnProperty7Changed();
    partial void OnProperty8Changing(int value);
    partial void OnProperty8Changed();
    partial void OnQualityChanging(int value);
    partial void OnQualityChanged();
    partial void OnValidChanging(int value);
    partial void OnValidChanged();
    partial void OnNeedSexChanging(int value);
    partial void OnNeedSexChanged();
    partial void OnCanDropChanging(bool value);
    partial void OnCanDropChanged();
    partial void OnCanDeleteChanging(bool value);
    partial void OnCanDeleteChanged();
    partial void OnCanEquipChanging(bool value);
    partial void OnCanEquipChanged();
    partial void OnCanUseChanging(bool value);
    partial void OnCanUseChanged();
    partial void OnScriptChanging(string value);
    partial void OnScriptChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnColorsChanging(string value);
    partial void OnColorsChanged();
    partial void OnIsVouchChanging(bool value);
    partial void OnIsVouchChanged();
    partial void OnCanStrengthenChanging(bool value);
    partial void OnCanStrengthenChanged();
    partial void OnCanComposeChanging(bool value);
    partial void OnCanComposeChanged();
    partial void OnNeedLevelChanging(int value);
    partial void OnNeedLevelChanged();
    #endregion
		
		public Shop_Good()
		{
			OnCreated();
		}
		
		[Column(Storage="_TemplateID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TemplateID
		{
			get
			{
				return this._TemplateID;
			}
			set
			{
				if ((this._TemplateID != value))
				{
					this.OnTemplateIDChanging(value);
					this.SendPropertyChanging();
					this._TemplateID = value;
					this.SendPropertyChanged("TemplateID");
					this.OnTemplateIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Attack", DbType="Int NOT NULL")]
		public int Attack
		{
			get
			{
				return this._Attack;
			}
			set
			{
				if ((this._Attack != value))
				{
					this.OnAttackChanging(value);
					this.SendPropertyChanging();
					this._Attack = value;
					this.SendPropertyChanged("Attack");
					this.OnAttackChanged();
				}
			}
		}
		
		[Column(Storage="_Defence", DbType="Int NOT NULL")]
		public int Defence
		{
			get
			{
				return this._Defence;
			}
			set
			{
				if ((this._Defence != value))
				{
					this.OnDefenceChanging(value);
					this.SendPropertyChanging();
					this._Defence = value;
					this.SendPropertyChanged("Defence");
					this.OnDefenceChanged();
				}
			}
		}
		
		[Column(Storage="_Luck", DbType="Int NOT NULL")]
		public int Luck
		{
			get
			{
				return this._Luck;
			}
			set
			{
				if ((this._Luck != value))
				{
					this.OnLuckChanging(value);
					this.SendPropertyChanging();
					this._Luck = value;
					this.SendPropertyChanged("Luck");
					this.OnLuckChanged();
				}
			}
		}
		
		[Column(Storage="_Agility", DbType="Int NOT NULL")]
		public int Agility
		{
			get
			{
				return this._Agility;
			}
			set
			{
				if ((this._Agility != value))
				{
					this.OnAgilityChanging(value);
					this.SendPropertyChanging();
					this._Agility = value;
					this.SendPropertyChanged("Agility");
					this.OnAgilityChanged();
				}
			}
		}
		
		[Column(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Column(Storage="_Pic", DbType="NVarChar(200)")]
		public string Pic
		{
			get
			{
				return this._Pic;
			}
			set
			{
				if ((this._Pic != value))
				{
					this.OnPicChanging(value);
					this.SendPropertyChanging();
					this._Pic = value;
					this.SendPropertyChanged("Pic");
					this.OnPicChanged();
				}
			}
		}
		
		[Column(Storage="_AddTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddTime
		{
			get
			{
				return this._AddTime;
			}
			set
			{
				if ((this._AddTime != value))
				{
					this.OnAddTimeChanging(value);
					this.SendPropertyChanging();
					this._AddTime = value;
					this.SendPropertyChanged("AddTime");
					this.OnAddTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Gold", DbType="Int NOT NULL")]
		public int Gold
		{
			get
			{
				return this._Gold;
			}
			set
			{
				if ((this._Gold != value))
				{
					this.OnGoldChanging(value);
					this.SendPropertyChanging();
					this._Gold = value;
					this.SendPropertyChanged("Gold");
					this.OnGoldChanged();
				}
			}
		}
		
		[Column(Storage="_Money", DbType="Int NOT NULL")]
		public int Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this.OnMoneyChanging(value);
					this.SendPropertyChanging();
					this._Money = value;
					this.SendPropertyChanged("Money");
					this.OnMoneyChanged();
				}
			}
		}
		
		[Column(Storage="_MaxCount", DbType="Int NOT NULL")]
		public int MaxCount
		{
			get
			{
				return this._MaxCount;
			}
			set
			{
				if ((this._MaxCount != value))
				{
					this.OnMaxCountChanging(value);
					this.SendPropertyChanging();
					this._MaxCount = value;
					this.SendPropertyChanged("MaxCount");
					this.OnMaxCountChanged();
				}
			}
		}
		
		[Column(Storage="_Property1", DbType="Int NOT NULL")]
		public int Property1
		{
			get
			{
				return this._Property1;
			}
			set
			{
				if ((this._Property1 != value))
				{
					this.OnProperty1Changing(value);
					this.SendPropertyChanging();
					this._Property1 = value;
					this.SendPropertyChanged("Property1");
					this.OnProperty1Changed();
				}
			}
		}
		
		[Column(Storage="_Property2", DbType="Int NOT NULL")]
		public int Property2
		{
			get
			{
				return this._Property2;
			}
			set
			{
				if ((this._Property2 != value))
				{
					this.OnProperty2Changing(value);
					this.SendPropertyChanging();
					this._Property2 = value;
					this.SendPropertyChanged("Property2");
					this.OnProperty2Changed();
				}
			}
		}
		
		[Column(Storage="_Property3", DbType="Int NOT NULL")]
		public int Property3
		{
			get
			{
				return this._Property3;
			}
			set
			{
				if ((this._Property3 != value))
				{
					this.OnProperty3Changing(value);
					this.SendPropertyChanging();
					this._Property3 = value;
					this.SendPropertyChanged("Property3");
					this.OnProperty3Changed();
				}
			}
		}
		
		[Column(Storage="_Property4", DbType="Int NOT NULL")]
		public int Property4
		{
			get
			{
				return this._Property4;
			}
			set
			{
				if ((this._Property4 != value))
				{
					this.OnProperty4Changing(value);
					this.SendPropertyChanging();
					this._Property4 = value;
					this.SendPropertyChanged("Property4");
					this.OnProperty4Changed();
				}
			}
		}
		
		[Column(Storage="_Property5", DbType="Int NOT NULL")]
		public int Property5
		{
			get
			{
				return this._Property5;
			}
			set
			{
				if ((this._Property5 != value))
				{
					this.OnProperty5Changing(value);
					this.SendPropertyChanging();
					this._Property5 = value;
					this.SendPropertyChanged("Property5");
					this.OnProperty5Changed();
				}
			}
		}
		
		[Column(Storage="_Property6", DbType="Int NOT NULL")]
		public int Property6
		{
			get
			{
				return this._Property6;
			}
			set
			{
				if ((this._Property6 != value))
				{
					this.OnProperty6Changing(value);
					this.SendPropertyChanging();
					this._Property6 = value;
					this.SendPropertyChanged("Property6");
					this.OnProperty6Changed();
				}
			}
		}
		
		[Column(Storage="_Property7", DbType="Int NOT NULL")]
		public int Property7
		{
			get
			{
				return this._Property7;
			}
			set
			{
				if ((this._Property7 != value))
				{
					this.OnProperty7Changing(value);
					this.SendPropertyChanging();
					this._Property7 = value;
					this.SendPropertyChanged("Property7");
					this.OnProperty7Changed();
				}
			}
		}
		
		[Column(Storage="_Property8", DbType="Int NOT NULL")]
		public int Property8
		{
			get
			{
				return this._Property8;
			}
			set
			{
				if ((this._Property8 != value))
				{
					this.OnProperty8Changing(value);
					this.SendPropertyChanging();
					this._Property8 = value;
					this.SendPropertyChanged("Property8");
					this.OnProperty8Changed();
				}
			}
		}
		
		[Column(Storage="_Quality", DbType="Int NOT NULL")]
		public int Quality
		{
			get
			{
				return this._Quality;
			}
			set
			{
				if ((this._Quality != value))
				{
					this.OnQualityChanging(value);
					this.SendPropertyChanging();
					this._Quality = value;
					this.SendPropertyChanged("Quality");
					this.OnQualityChanged();
				}
			}
		}
		
		[Column(Storage="_Valid", DbType="Int NOT NULL")]
		public int Valid
		{
			get
			{
				return this._Valid;
			}
			set
			{
				if ((this._Valid != value))
				{
					this.OnValidChanging(value);
					this.SendPropertyChanging();
					this._Valid = value;
					this.SendPropertyChanged("Valid");
					this.OnValidChanged();
				}
			}
		}
		
		[Column(Storage="_NeedSex", DbType="Int NOT NULL")]
		public int NeedSex
		{
			get
			{
				return this._NeedSex;
			}
			set
			{
				if ((this._NeedSex != value))
				{
					this.OnNeedSexChanging(value);
					this.SendPropertyChanging();
					this._NeedSex = value;
					this.SendPropertyChanged("NeedSex");
					this.OnNeedSexChanged();
				}
			}
		}
		
		[Column(Storage="_CanDrop", DbType="Bit NOT NULL")]
		public bool CanDrop
		{
			get
			{
				return this._CanDrop;
			}
			set
			{
				if ((this._CanDrop != value))
				{
					this.OnCanDropChanging(value);
					this.SendPropertyChanging();
					this._CanDrop = value;
					this.SendPropertyChanged("CanDrop");
					this.OnCanDropChanged();
				}
			}
		}
		
		[Column(Storage="_CanDelete", DbType="Bit NOT NULL")]
		public bool CanDelete
		{
			get
			{
				return this._CanDelete;
			}
			set
			{
				if ((this._CanDelete != value))
				{
					this.OnCanDeleteChanging(value);
					this.SendPropertyChanging();
					this._CanDelete = value;
					this.SendPropertyChanged("CanDelete");
					this.OnCanDeleteChanged();
				}
			}
		}
		
		[Column(Storage="_CanEquip", DbType="Bit NOT NULL")]
		public bool CanEquip
		{
			get
			{
				return this._CanEquip;
			}
			set
			{
				if ((this._CanEquip != value))
				{
					this.OnCanEquipChanging(value);
					this.SendPropertyChanging();
					this._CanEquip = value;
					this.SendPropertyChanged("CanEquip");
					this.OnCanEquipChanged();
				}
			}
		}
		
		[Column(Storage="_CanUse", DbType="Bit NOT NULL")]
		public bool CanUse
		{
			get
			{
				return this._CanUse;
			}
			set
			{
				if ((this._CanUse != value))
				{
					this.OnCanUseChanging(value);
					this.SendPropertyChanging();
					this._CanUse = value;
					this.SendPropertyChanged("CanUse");
					this.OnCanUseChanged();
				}
			}
		}
		
		[Column(Storage="_Script", DbType="NVarChar(200)")]
		public string Script
		{
			get
			{
				return this._Script;
			}
			set
			{
				if ((this._Script != value))
				{
					this.OnScriptChanging(value);
					this.SendPropertyChanging();
					this._Script = value;
					this.SendPropertyChanged("Script");
					this.OnScriptChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="NVarChar(200)")]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Column(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_Colors", DbType="NVarChar(1000)")]
		public string Colors
		{
			get
			{
				return this._Colors;
			}
			set
			{
				if ((this._Colors != value))
				{
					this.OnColorsChanging(value);
					this.SendPropertyChanging();
					this._Colors = value;
					this.SendPropertyChanged("Colors");
					this.OnColorsChanged();
				}
			}
		}
		
		[Column(Storage="_IsVouch", DbType="Bit NOT NULL")]
		public bool IsVouch
		{
			get
			{
				return this._IsVouch;
			}
			set
			{
				if ((this._IsVouch != value))
				{
					this.OnIsVouchChanging(value);
					this.SendPropertyChanging();
					this._IsVouch = value;
					this.SendPropertyChanged("IsVouch");
					this.OnIsVouchChanged();
				}
			}
		}
		
		[Column(Storage="_CanStrengthen", DbType="Bit NOT NULL")]
		public bool CanStrengthen
		{
			get
			{
				return this._CanStrengthen;
			}
			set
			{
				if ((this._CanStrengthen != value))
				{
					this.OnCanStrengthenChanging(value);
					this.SendPropertyChanging();
					this._CanStrengthen = value;
					this.SendPropertyChanged("CanStrengthen");
					this.OnCanStrengthenChanged();
				}
			}
		}
		
		[Column(Storage="_CanCompose", DbType="Bit NOT NULL")]
		public bool CanCompose
		{
			get
			{
				return this._CanCompose;
			}
			set
			{
				if ((this._CanCompose != value))
				{
					this.OnCanComposeChanging(value);
					this.SendPropertyChanging();
					this._CanCompose = value;
					this.SendPropertyChanged("CanCompose");
					this.OnCanComposeChanged();
				}
			}
		}
		
		[Column(Storage="_NeedLevel", DbType="Int NOT NULL")]
		public int NeedLevel
		{
			get
			{
				return this._NeedLevel;
			}
			set
			{
				if ((this._NeedLevel != value))
				{
					this.OnNeedLevelChanging(value);
					this.SendPropertyChanging();
					this._NeedLevel = value;
					this.SendPropertyChanged("NeedLevel");
					this.OnNeedLevelChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Sys_Users_Fight")]
	public partial class Sys_Users_Fight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _Attack;
		
		private int _Defence;
		
		private int _Luck;
		
		private int _Agility;
		
		private int _Delay;
		
		private string _Honor;
		
		private string _Map;
		
		private string _Directory;
		
		private bool _IsExist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAttackChanging(int value);
    partial void OnAttackChanged();
    partial void OnDefenceChanging(int value);
    partial void OnDefenceChanged();
    partial void OnLuckChanging(int value);
    partial void OnLuckChanged();
    partial void OnAgilityChanging(int value);
    partial void OnAgilityChanged();
    partial void OnDelayChanging(int value);
    partial void OnDelayChanged();
    partial void OnHonorChanging(string value);
    partial void OnHonorChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnDirectoryChanging(string value);
    partial void OnDirectoryChanged();
    partial void OnIsExistChanging(bool value);
    partial void OnIsExistChanged();
    #endregion
		
		public Sys_Users_Fight()
		{
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Attack", DbType="Int NOT NULL")]
		public int Attack
		{
			get
			{
				return this._Attack;
			}
			set
			{
				if ((this._Attack != value))
				{
					this.OnAttackChanging(value);
					this.SendPropertyChanging();
					this._Attack = value;
					this.SendPropertyChanged("Attack");
					this.OnAttackChanged();
				}
			}
		}
		
		[Column(Storage="_Defence", DbType="Int NOT NULL")]
		public int Defence
		{
			get
			{
				return this._Defence;
			}
			set
			{
				if ((this._Defence != value))
				{
					this.OnDefenceChanging(value);
					this.SendPropertyChanging();
					this._Defence = value;
					this.SendPropertyChanged("Defence");
					this.OnDefenceChanged();
				}
			}
		}
		
		[Column(Storage="_Luck", DbType="Int NOT NULL")]
		public int Luck
		{
			get
			{
				return this._Luck;
			}
			set
			{
				if ((this._Luck != value))
				{
					this.OnLuckChanging(value);
					this.SendPropertyChanging();
					this._Luck = value;
					this.SendPropertyChanged("Luck");
					this.OnLuckChanged();
				}
			}
		}
		
		[Column(Storage="_Agility", DbType="Int NOT NULL")]
		public int Agility
		{
			get
			{
				return this._Agility;
			}
			set
			{
				if ((this._Agility != value))
				{
					this.OnAgilityChanging(value);
					this.SendPropertyChanging();
					this._Agility = value;
					this.SendPropertyChanged("Agility");
					this.OnAgilityChanged();
				}
			}
		}
		
		[Column(Storage="_Delay", DbType="Int NOT NULL")]
		public int Delay
		{
			get
			{
				return this._Delay;
			}
			set
			{
				if ((this._Delay != value))
				{
					this.OnDelayChanging(value);
					this.SendPropertyChanging();
					this._Delay = value;
					this.SendPropertyChanged("Delay");
					this.OnDelayChanged();
				}
			}
		}
		
		[Column(Storage="_Honor", DbType="NVarChar(200)")]
		public string Honor
		{
			get
			{
				return this._Honor;
			}
			set
			{
				if ((this._Honor != value))
				{
					this.OnHonorChanging(value);
					this.SendPropertyChanging();
					this._Honor = value;
					this.SendPropertyChanged("Honor");
					this.OnHonorChanged();
				}
			}
		}
		
		[Column(Storage="_Map", DbType="NVarChar(50)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[Column(Storage="_Directory", DbType="NVarChar(50)")]
		public string Directory
		{
			get
			{
				return this._Directory;
			}
			set
			{
				if ((this._Directory != value))
				{
					this.OnDirectoryChanging(value);
					this.SendPropertyChanging();
					this._Directory = value;
					this.SendPropertyChanged("Directory");
					this.OnDirectoryChanged();
				}
			}
		}
		
		[Column(Storage="_IsExist", DbType="Bit NOT NULL")]
		public bool IsExist
		{
			get
			{
				return this._IsExist;
			}
			set
			{
				if ((this._IsExist != value))
				{
					this.OnIsExistChanging(value);
					this.SendPropertyChanging();
					this._IsExist = value;
					this.SendPropertyChanged("IsExist");
					this.OnIsExistChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Sys_Users_Detail")]
	public partial class Sys_Users_Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserName;
		
		private string _Password;
		
		private string _NickName;
		
		private System.DateTime _Date;
		
		private bool _IsConsortia;
		
		private int _ConsortiaID;
		
		private bool _Sex;
		
		private int _Win;
		
		private int _Total;
		
		private int _Escape;
		
		private int _GP;
		
		private string _Honor;
		
		private int _Gold;
		
		private int _Money;
		
		private string _Style;
		
		private string _Colors;
		
		private int _Hide;
		
		private int _Grade;
		
		private int _State;
		
		private bool _IsFirst;
		
		private bool _IsExist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnIsConsortiaChanging(bool value);
    partial void OnIsConsortiaChanged();
    partial void OnConsortiaIDChanging(int value);
    partial void OnConsortiaIDChanged();
    partial void OnSexChanging(bool value);
    partial void OnSexChanged();
    partial void OnWinChanging(int value);
    partial void OnWinChanged();
    partial void OnTotalChanging(int value);
    partial void OnTotalChanged();
    partial void OnEscapeChanging(int value);
    partial void OnEscapeChanged();
    partial void OnGPChanging(int value);
    partial void OnGPChanged();
    partial void OnHonorChanging(string value);
    partial void OnHonorChanged();
    partial void OnGoldChanging(int value);
    partial void OnGoldChanged();
    partial void OnMoneyChanging(int value);
    partial void OnMoneyChanged();
    partial void OnStyleChanging(string value);
    partial void OnStyleChanged();
    partial void OnColorsChanging(string value);
    partial void OnColorsChanged();
    partial void OnHideChanging(int value);
    partial void OnHideChanged();
    partial void OnGradeChanging(int value);
    partial void OnGradeChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnIsFirstChanging(bool value);
    partial void OnIsFirstChanged();
    partial void OnIsExistChanging(bool value);
    partial void OnIsExistChanged();
    #endregion
		
		public Sys_Users_Detail()
		{
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(200)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(200)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_NickName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this.OnNickNameChanging(value);
					this.SendPropertyChanging();
					this._NickName = value;
					this.SendPropertyChanged("NickName");
					this.OnNickNameChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsConsortia", DbType="Bit NOT NULL")]
		public bool IsConsortia
		{
			get
			{
				return this._IsConsortia;
			}
			set
			{
				if ((this._IsConsortia != value))
				{
					this.OnIsConsortiaChanging(value);
					this.SendPropertyChanging();
					this._IsConsortia = value;
					this.SendPropertyChanged("IsConsortia");
					this.OnIsConsortiaChanged();
				}
			}
		}
		
		[Column(Storage="_ConsortiaID", DbType="Int NOT NULL")]
		public int ConsortiaID
		{
			get
			{
				return this._ConsortiaID;
			}
			set
			{
				if ((this._ConsortiaID != value))
				{
					this.OnConsortiaIDChanging(value);
					this.SendPropertyChanging();
					this._ConsortiaID = value;
					this.SendPropertyChanged("ConsortiaID");
					this.OnConsortiaIDChanged();
				}
			}
		}
		
		[Column(Storage="_Sex", DbType="Bit NOT NULL")]
		public bool Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[Column(Storage="_Win", DbType="Int NOT NULL")]
		public int Win
		{
			get
			{
				return this._Win;
			}
			set
			{
				if ((this._Win != value))
				{
					this.OnWinChanging(value);
					this.SendPropertyChanging();
					this._Win = value;
					this.SendPropertyChanged("Win");
					this.OnWinChanged();
				}
			}
		}
		
		[Column(Storage="_Total", DbType="Int NOT NULL")]
		public int Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[Column(Name="[Escape]", Storage="_Escape", DbType="Int NOT NULL")]
		public int Escape
		{
			get
			{
				return this._Escape;
			}
			set
			{
				if ((this._Escape != value))
				{
					this.OnEscapeChanging(value);
					this.SendPropertyChanging();
					this._Escape = value;
					this.SendPropertyChanged("Escape");
					this.OnEscapeChanged();
				}
			}
		}
		
		[Column(Storage="_GP", DbType="Int NOT NULL")]
		public int GP
		{
			get
			{
				return this._GP;
			}
			set
			{
				if ((this._GP != value))
				{
					this.OnGPChanging(value);
					this.SendPropertyChanging();
					this._GP = value;
					this.SendPropertyChanged("GP");
					this.OnGPChanged();
				}
			}
		}
		
		[Column(Storage="_Honor", DbType="NVarChar(50)")]
		public string Honor
		{
			get
			{
				return this._Honor;
			}
			set
			{
				if ((this._Honor != value))
				{
					this.OnHonorChanging(value);
					this.SendPropertyChanging();
					this._Honor = value;
					this.SendPropertyChanged("Honor");
					this.OnHonorChanged();
				}
			}
		}
		
		[Column(Storage="_Gold", DbType="Int NOT NULL")]
		public int Gold
		{
			get
			{
				return this._Gold;
			}
			set
			{
				if ((this._Gold != value))
				{
					this.OnGoldChanging(value);
					this.SendPropertyChanging();
					this._Gold = value;
					this.SendPropertyChanged("Gold");
					this.OnGoldChanged();
				}
			}
		}
		
		[Column(Storage="_Money", DbType="Int NOT NULL")]
		public int Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this.OnMoneyChanging(value);
					this.SendPropertyChanging();
					this._Money = value;
					this.SendPropertyChanged("Money");
					this.OnMoneyChanged();
				}
			}
		}
		
		[Column(Storage="_Style", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Style
		{
			get
			{
				return this._Style;
			}
			set
			{
				if ((this._Style != value))
				{
					this.OnStyleChanging(value);
					this.SendPropertyChanging();
					this._Style = value;
					this.SendPropertyChanged("Style");
					this.OnStyleChanged();
				}
			}
		}
		
		[Column(Storage="_Colors", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Colors
		{
			get
			{
				return this._Colors;
			}
			set
			{
				if ((this._Colors != value))
				{
					this.OnColorsChanging(value);
					this.SendPropertyChanging();
					this._Colors = value;
					this.SendPropertyChanged("Colors");
					this.OnColorsChanged();
				}
			}
		}
		
		[Column(Storage="_Hide", DbType="Int NOT NULL")]
		public int Hide
		{
			get
			{
				return this._Hide;
			}
			set
			{
				if ((this._Hide != value))
				{
					this.OnHideChanging(value);
					this.SendPropertyChanging();
					this._Hide = value;
					this.SendPropertyChanged("Hide");
					this.OnHideChanged();
				}
			}
		}
		
		[Column(Storage="_Grade", DbType="Int NOT NULL")]
		public int Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="Int NOT NULL")]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_IsFirst", DbType="Bit NOT NULL")]
		public bool IsFirst
		{
			get
			{
				return this._IsFirst;
			}
			set
			{
				if ((this._IsFirst != value))
				{
					this.OnIsFirstChanging(value);
					this.SendPropertyChanging();
					this._IsFirst = value;
					this.SendPropertyChanged("IsFirst");
					this.OnIsFirstChanged();
				}
			}
		}
		
		[Column(Storage="_IsExist", DbType="Bit NOT NULL")]
		public bool IsExist
		{
			get
			{
				return this._IsExist;
			}
			set
			{
				if ((this._IsExist != value))
				{
					this.OnIsExistChanging(value);
					this.SendPropertyChanging();
					this._IsExist = value;
					this.SendPropertyChanged("IsExist");
					this.OnIsExistChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Quest")]
	public partial class Quest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestID;
		
		private int _Level;
		
		private int _NeedMinLevel;
		
		private int _NeedMaxLevel;
		
		private int _Type;
		
		private int _PreQuestID;
		
		private int _NextQuestID;
		
		private bool _CanRepeat;
		
		private int _RepeatInterval;
		
		private string _Title;
		
		private string _Detail;
		
		private string _Objective;
		
		private int _Condition;
		
		private int _AchieveLevel;
		
		private int _ReqItemID;
		
		private int _ReqKillLevel;
		
		private bool _ReqBeCaptain;
		
		private int _ReqMap;
		
		private int _ReqFightMode;
		
		private int _ReqTimeMode;
		
		private int _StrengthenLevel;
		
		private int _FinishCount;
		
		private int _RewardGold;
		
		private int _RewardGP;
		
		private int _RewardItemID;
		
		private int _RewardItemCount;
		
		private int _RewardItemValidateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestIDChanging(int value);
    partial void OnQuestIDChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnNeedMinLevelChanging(int value);
    partial void OnNeedMinLevelChanged();
    partial void OnNeedMaxLevelChanging(int value);
    partial void OnNeedMaxLevelChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnPreQuestIDChanging(int value);
    partial void OnPreQuestIDChanged();
    partial void OnNextQuestIDChanging(int value);
    partial void OnNextQuestIDChanged();
    partial void OnCanRepeatChanging(bool value);
    partial void OnCanRepeatChanged();
    partial void OnRepeatIntervalChanging(int value);
    partial void OnRepeatIntervalChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    partial void OnObjectiveChanging(string value);
    partial void OnObjectiveChanged();
    partial void OnConditionChanging(int value);
    partial void OnConditionChanged();
    partial void OnAchieveLevelChanging(int value);
    partial void OnAchieveLevelChanged();
    partial void OnReqItemIDChanging(int value);
    partial void OnReqItemIDChanged();
    partial void OnReqKillLevelChanging(int value);
    partial void OnReqKillLevelChanged();
    partial void OnReqBeCaptainChanging(bool value);
    partial void OnReqBeCaptainChanged();
    partial void OnReqMapChanging(int value);
    partial void OnReqMapChanged();
    partial void OnReqFightModeChanging(int value);
    partial void OnReqFightModeChanged();
    partial void OnReqTimeModeChanging(int value);
    partial void OnReqTimeModeChanged();
    partial void OnStrengthenLevelChanging(int value);
    partial void OnStrengthenLevelChanged();
    partial void OnFinishCountChanging(int value);
    partial void OnFinishCountChanged();
    partial void OnRewardGoldChanging(int value);
    partial void OnRewardGoldChanged();
    partial void OnRewardGPChanging(int value);
    partial void OnRewardGPChanged();
    partial void OnRewardItemIDChanging(int value);
    partial void OnRewardItemIDChanged();
    partial void OnRewardItemCountChanging(int value);
    partial void OnRewardItemCountChanged();
    partial void OnRewardItemValidateTimeChanging(int value);
    partial void OnRewardItemValidateTimeChanged();
    #endregion
		
		public Quest()
		{
			OnCreated();
		}
		
		[Column(Storage="_QuestID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestID
		{
			get
			{
				return this._QuestID;
			}
			set
			{
				if ((this._QuestID != value))
				{
					this.OnQuestIDChanging(value);
					this.SendPropertyChanging();
					this._QuestID = value;
					this.SendPropertyChanged("QuestID");
					this.OnQuestIDChanged();
				}
			}
		}
		
		[Column(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Column(Storage="_NeedMinLevel", DbType="Int NOT NULL")]
		public int NeedMinLevel
		{
			get
			{
				return this._NeedMinLevel;
			}
			set
			{
				if ((this._NeedMinLevel != value))
				{
					this.OnNeedMinLevelChanging(value);
					this.SendPropertyChanging();
					this._NeedMinLevel = value;
					this.SendPropertyChanged("NeedMinLevel");
					this.OnNeedMinLevelChanged();
				}
			}
		}
		
		[Column(Storage="_NeedMaxLevel", DbType="Int NOT NULL")]
		public int NeedMaxLevel
		{
			get
			{
				return this._NeedMaxLevel;
			}
			set
			{
				if ((this._NeedMaxLevel != value))
				{
					this.OnNeedMaxLevelChanging(value);
					this.SendPropertyChanging();
					this._NeedMaxLevel = value;
					this.SendPropertyChanged("NeedMaxLevel");
					this.OnNeedMaxLevelChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PreQuestID", DbType="Int NOT NULL")]
		public int PreQuestID
		{
			get
			{
				return this._PreQuestID;
			}
			set
			{
				if ((this._PreQuestID != value))
				{
					this.OnPreQuestIDChanging(value);
					this.SendPropertyChanging();
					this._PreQuestID = value;
					this.SendPropertyChanged("PreQuestID");
					this.OnPreQuestIDChanged();
				}
			}
		}
		
		[Column(Storage="_NextQuestID", DbType="Int NOT NULL")]
		public int NextQuestID
		{
			get
			{
				return this._NextQuestID;
			}
			set
			{
				if ((this._NextQuestID != value))
				{
					this.OnNextQuestIDChanging(value);
					this.SendPropertyChanging();
					this._NextQuestID = value;
					this.SendPropertyChanged("NextQuestID");
					this.OnNextQuestIDChanged();
				}
			}
		}
		
		[Column(Storage="_CanRepeat", DbType="Bit NOT NULL")]
		public bool CanRepeat
		{
			get
			{
				return this._CanRepeat;
			}
			set
			{
				if ((this._CanRepeat != value))
				{
					this.OnCanRepeatChanging(value);
					this.SendPropertyChanging();
					this._CanRepeat = value;
					this.SendPropertyChanged("CanRepeat");
					this.OnCanRepeatChanged();
				}
			}
		}
		
		[Column(Storage="_RepeatInterval", DbType="Int NOT NULL")]
		public int RepeatInterval
		{
			get
			{
				return this._RepeatInterval;
			}
			set
			{
				if ((this._RepeatInterval != value))
				{
					this.OnRepeatIntervalChanging(value);
					this.SendPropertyChanging();
					this._RepeatInterval = value;
					this.SendPropertyChanged("RepeatInterval");
					this.OnRepeatIntervalChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(30)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Detail", DbType="NVarChar(150)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[Column(Storage="_Objective", DbType="NVarChar(50)")]
		public string Objective
		{
			get
			{
				return this._Objective;
			}
			set
			{
				if ((this._Objective != value))
				{
					this.OnObjectiveChanging(value);
					this.SendPropertyChanging();
					this._Objective = value;
					this.SendPropertyChanged("Objective");
					this.OnObjectiveChanged();
				}
			}
		}
		
		[Column(Storage="_Condition", DbType="Int NOT NULL")]
		public int Condition
		{
			get
			{
				return this._Condition;
			}
			set
			{
				if ((this._Condition != value))
				{
					this.OnConditionChanging(value);
					this.SendPropertyChanging();
					this._Condition = value;
					this.SendPropertyChanged("Condition");
					this.OnConditionChanged();
				}
			}
		}
		
		[Column(Storage="_AchieveLevel", DbType="Int NOT NULL")]
		public int AchieveLevel
		{
			get
			{
				return this._AchieveLevel;
			}
			set
			{
				if ((this._AchieveLevel != value))
				{
					this.OnAchieveLevelChanging(value);
					this.SendPropertyChanging();
					this._AchieveLevel = value;
					this.SendPropertyChanged("AchieveLevel");
					this.OnAchieveLevelChanged();
				}
			}
		}
		
		[Column(Storage="_ReqItemID", DbType="Int NOT NULL")]
		public int ReqItemID
		{
			get
			{
				return this._ReqItemID;
			}
			set
			{
				if ((this._ReqItemID != value))
				{
					this.OnReqItemIDChanging(value);
					this.SendPropertyChanging();
					this._ReqItemID = value;
					this.SendPropertyChanged("ReqItemID");
					this.OnReqItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReqKillLevel", DbType="Int NOT NULL")]
		public int ReqKillLevel
		{
			get
			{
				return this._ReqKillLevel;
			}
			set
			{
				if ((this._ReqKillLevel != value))
				{
					this.OnReqKillLevelChanging(value);
					this.SendPropertyChanging();
					this._ReqKillLevel = value;
					this.SendPropertyChanged("ReqKillLevel");
					this.OnReqKillLevelChanged();
				}
			}
		}
		
		[Column(Storage="_ReqBeCaptain", DbType="Bit NOT NULL")]
		public bool ReqBeCaptain
		{
			get
			{
				return this._ReqBeCaptain;
			}
			set
			{
				if ((this._ReqBeCaptain != value))
				{
					this.OnReqBeCaptainChanging(value);
					this.SendPropertyChanging();
					this._ReqBeCaptain = value;
					this.SendPropertyChanged("ReqBeCaptain");
					this.OnReqBeCaptainChanged();
				}
			}
		}
		
		[Column(Storage="_ReqMap", DbType="Int NOT NULL")]
		public int ReqMap
		{
			get
			{
				return this._ReqMap;
			}
			set
			{
				if ((this._ReqMap != value))
				{
					this.OnReqMapChanging(value);
					this.SendPropertyChanging();
					this._ReqMap = value;
					this.SendPropertyChanged("ReqMap");
					this.OnReqMapChanged();
				}
			}
		}
		
		[Column(Storage="_ReqFightMode", DbType="Int NOT NULL")]
		public int ReqFightMode
		{
			get
			{
				return this._ReqFightMode;
			}
			set
			{
				if ((this._ReqFightMode != value))
				{
					this.OnReqFightModeChanging(value);
					this.SendPropertyChanging();
					this._ReqFightMode = value;
					this.SendPropertyChanged("ReqFightMode");
					this.OnReqFightModeChanged();
				}
			}
		}
		
		[Column(Storage="_ReqTimeMode", DbType="Int NOT NULL")]
		public int ReqTimeMode
		{
			get
			{
				return this._ReqTimeMode;
			}
			set
			{
				if ((this._ReqTimeMode != value))
				{
					this.OnReqTimeModeChanging(value);
					this.SendPropertyChanging();
					this._ReqTimeMode = value;
					this.SendPropertyChanged("ReqTimeMode");
					this.OnReqTimeModeChanged();
				}
			}
		}
		
		[Column(Storage="_StrengthenLevel", DbType="Int NOT NULL")]
		public int StrengthenLevel
		{
			get
			{
				return this._StrengthenLevel;
			}
			set
			{
				if ((this._StrengthenLevel != value))
				{
					this.OnStrengthenLevelChanging(value);
					this.SendPropertyChanging();
					this._StrengthenLevel = value;
					this.SendPropertyChanged("StrengthenLevel");
					this.OnStrengthenLevelChanged();
				}
			}
		}
		
		[Column(Storage="_FinishCount", DbType="Int NOT NULL")]
		public int FinishCount
		{
			get
			{
				return this._FinishCount;
			}
			set
			{
				if ((this._FinishCount != value))
				{
					this.OnFinishCountChanging(value);
					this.SendPropertyChanging();
					this._FinishCount = value;
					this.SendPropertyChanged("FinishCount");
					this.OnFinishCountChanged();
				}
			}
		}
		
		[Column(Storage="_RewardGold", DbType="Int NOT NULL")]
		public int RewardGold
		{
			get
			{
				return this._RewardGold;
			}
			set
			{
				if ((this._RewardGold != value))
				{
					this.OnRewardGoldChanging(value);
					this.SendPropertyChanging();
					this._RewardGold = value;
					this.SendPropertyChanged("RewardGold");
					this.OnRewardGoldChanged();
				}
			}
		}
		
		[Column(Storage="_RewardGP", DbType="Int NOT NULL")]
		public int RewardGP
		{
			get
			{
				return this._RewardGP;
			}
			set
			{
				if ((this._RewardGP != value))
				{
					this.OnRewardGPChanging(value);
					this.SendPropertyChanging();
					this._RewardGP = value;
					this.SendPropertyChanged("RewardGP");
					this.OnRewardGPChanged();
				}
			}
		}
		
		[Column(Storage="_RewardItemID", DbType="Int NOT NULL")]
		public int RewardItemID
		{
			get
			{
				return this._RewardItemID;
			}
			set
			{
				if ((this._RewardItemID != value))
				{
					this.OnRewardItemIDChanging(value);
					this.SendPropertyChanging();
					this._RewardItemID = value;
					this.SendPropertyChanged("RewardItemID");
					this.OnRewardItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_RewardItemCount", DbType="Int NOT NULL")]
		public int RewardItemCount
		{
			get
			{
				return this._RewardItemCount;
			}
			set
			{
				if ((this._RewardItemCount != value))
				{
					this.OnRewardItemCountChanging(value);
					this.SendPropertyChanging();
					this._RewardItemCount = value;
					this.SendPropertyChanged("RewardItemCount");
					this.OnRewardItemCountChanged();
				}
			}
		}
		
		[Column(Storage="_RewardItemValidateTime", DbType="Int NOT NULL")]
		public int RewardItemValidateTime
		{
			get
			{
				return this._RewardItemValidateTime;
			}
			set
			{
				if ((this._RewardItemValidateTime != value))
				{
					this.OnRewardItemValidateTimeChanging(value);
					this.SendPropertyChanging();
					this._RewardItemValidateTime = value;
					this.SendPropertyChanged("RewardItemValidateTime");
					this.OnRewardItemValidateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.QuestData")]
	public partial class QuestData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _QuestID;
		
		private int _ConditionCount;
		
		private bool _IsComplete;
		
		private System.Nullable<System.DateTime> _CompletedDate;
		
		private bool _IsExist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnQuestIDChanging(int value);
    partial void OnQuestIDChanged();
    partial void OnConditionCountChanging(int value);
    partial void OnConditionCountChanged();
    partial void OnIsCompleteChanging(bool value);
    partial void OnIsCompleteChanged();
    partial void OnCompletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletedDateChanged();
    partial void OnIsExistChanging(bool value);
    partial void OnIsExistChanged();
    #endregion
		
		public QuestData()
		{
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuestID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestID
		{
			get
			{
				return this._QuestID;
			}
			set
			{
				if ((this._QuestID != value))
				{
					this.OnQuestIDChanging(value);
					this.SendPropertyChanging();
					this._QuestID = value;
					this.SendPropertyChanged("QuestID");
					this.OnQuestIDChanged();
				}
			}
		}
		
		[Column(Storage="_ConditionCount", DbType="Int NOT NULL")]
		public int ConditionCount
		{
			get
			{
				return this._ConditionCount;
			}
			set
			{
				if ((this._ConditionCount != value))
				{
					this.OnConditionCountChanging(value);
					this.SendPropertyChanging();
					this._ConditionCount = value;
					this.SendPropertyChanged("ConditionCount");
					this.OnConditionCountChanged();
				}
			}
		}
		
		[Column(Storage="_IsComplete", DbType="Bit NOT NULL")]
		public bool IsComplete
		{
			get
			{
				return this._IsComplete;
			}
			set
			{
				if ((this._IsComplete != value))
				{
					this.OnIsCompleteChanging(value);
					this.SendPropertyChanging();
					this._IsComplete = value;
					this.SendPropertyChanged("IsComplete");
					this.OnIsCompleteChanged();
				}
			}
		}
		
		[Column(Storage="_CompletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompletedDate
		{
			get
			{
				return this._CompletedDate;
			}
			set
			{
				if ((this._CompletedDate != value))
				{
					this.OnCompletedDateChanging(value);
					this.SendPropertyChanging();
					this._CompletedDate = value;
					this.SendPropertyChanged("CompletedDate");
					this.OnCompletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsExist", DbType="Bit NOT NULL")]
		public bool IsExist
		{
			get
			{
				return this._IsExist;
			}
			set
			{
				if ((this._IsExist != value))
				{
					this.OnIsExistChanging(value);
					this.SendPropertyChanging();
					this._IsExist = value;
					this.SendPropertyChanged("IsExist");
					this.OnIsExistChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Game_Map")]
	public partial class Game_Map : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private int _ForegroundWidth;
		
		private int _ForegroundHeight;
		
		private int _BackroundWidht;
		
		private int _BackroundHeight;
		
		private int _DeadWidth;
		
		private int _DeadHeight;
		
		private int _Weight;
		
		private int _DragIndex;
		
		private string _ForePic;
		
		private string _BackPic;
		
		private string _DeadPic;
		
		private string _Pic;
		
		private string _Remark;
		
		private string _BackMusic;
		
		private string _PosX;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnForegroundWidthChanging(int value);
    partial void OnForegroundWidthChanged();
    partial void OnForegroundHeightChanging(int value);
    partial void OnForegroundHeightChanged();
    partial void OnBackroundWidhtChanging(int value);
    partial void OnBackroundWidhtChanged();
    partial void OnBackroundHeightChanging(int value);
    partial void OnBackroundHeightChanged();
    partial void OnDeadWidthChanging(int value);
    partial void OnDeadWidthChanged();
    partial void OnDeadHeightChanging(int value);
    partial void OnDeadHeightChanged();
    partial void OnWeightChanging(int value);
    partial void OnWeightChanged();
    partial void OnDragIndexChanging(int value);
    partial void OnDragIndexChanged();
    partial void OnForePicChanging(string value);
    partial void OnForePicChanged();
    partial void OnBackPicChanging(string value);
    partial void OnBackPicChanged();
    partial void OnDeadPicChanging(string value);
    partial void OnDeadPicChanged();
    partial void OnPicChanging(string value);
    partial void OnPicChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnBackMusicChanging(string value);
    partial void OnBackMusicChanged();
    partial void OnPosXChanging(string value);
    partial void OnPosXChanged();
    #endregion
		
		public Game_Map()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ForegroundWidth", DbType="Int NOT NULL")]
		public int ForegroundWidth
		{
			get
			{
				return this._ForegroundWidth;
			}
			set
			{
				if ((this._ForegroundWidth != value))
				{
					this.OnForegroundWidthChanging(value);
					this.SendPropertyChanging();
					this._ForegroundWidth = value;
					this.SendPropertyChanged("ForegroundWidth");
					this.OnForegroundWidthChanged();
				}
			}
		}
		
		[Column(Storage="_ForegroundHeight", DbType="Int NOT NULL")]
		public int ForegroundHeight
		{
			get
			{
				return this._ForegroundHeight;
			}
			set
			{
				if ((this._ForegroundHeight != value))
				{
					this.OnForegroundHeightChanging(value);
					this.SendPropertyChanging();
					this._ForegroundHeight = value;
					this.SendPropertyChanged("ForegroundHeight");
					this.OnForegroundHeightChanged();
				}
			}
		}
		
		[Column(Storage="_BackroundWidht", DbType="Int NOT NULL")]
		public int BackroundWidht
		{
			get
			{
				return this._BackroundWidht;
			}
			set
			{
				if ((this._BackroundWidht != value))
				{
					this.OnBackroundWidhtChanging(value);
					this.SendPropertyChanging();
					this._BackroundWidht = value;
					this.SendPropertyChanged("BackroundWidht");
					this.OnBackroundWidhtChanged();
				}
			}
		}
		
		[Column(Storage="_BackroundHeight", DbType="Int NOT NULL")]
		public int BackroundHeight
		{
			get
			{
				return this._BackroundHeight;
			}
			set
			{
				if ((this._BackroundHeight != value))
				{
					this.OnBackroundHeightChanging(value);
					this.SendPropertyChanging();
					this._BackroundHeight = value;
					this.SendPropertyChanged("BackroundHeight");
					this.OnBackroundHeightChanged();
				}
			}
		}
		
		[Column(Storage="_DeadWidth", DbType="Int NOT NULL")]
		public int DeadWidth
		{
			get
			{
				return this._DeadWidth;
			}
			set
			{
				if ((this._DeadWidth != value))
				{
					this.OnDeadWidthChanging(value);
					this.SendPropertyChanging();
					this._DeadWidth = value;
					this.SendPropertyChanged("DeadWidth");
					this.OnDeadWidthChanged();
				}
			}
		}
		
		[Column(Storage="_DeadHeight", DbType="Int NOT NULL")]
		public int DeadHeight
		{
			get
			{
				return this._DeadHeight;
			}
			set
			{
				if ((this._DeadHeight != value))
				{
					this.OnDeadHeightChanging(value);
					this.SendPropertyChanging();
					this._DeadHeight = value;
					this.SendPropertyChanged("DeadHeight");
					this.OnDeadHeightChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Int NOT NULL")]
		public int Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_DragIndex", DbType="Int NOT NULL")]
		public int DragIndex
		{
			get
			{
				return this._DragIndex;
			}
			set
			{
				if ((this._DragIndex != value))
				{
					this.OnDragIndexChanging(value);
					this.SendPropertyChanging();
					this._DragIndex = value;
					this.SendPropertyChanged("DragIndex");
					this.OnDragIndexChanged();
				}
			}
		}
		
		[Column(Storage="_ForePic", DbType="NVarChar(200)")]
		public string ForePic
		{
			get
			{
				return this._ForePic;
			}
			set
			{
				if ((this._ForePic != value))
				{
					this.OnForePicChanging(value);
					this.SendPropertyChanging();
					this._ForePic = value;
					this.SendPropertyChanged("ForePic");
					this.OnForePicChanged();
				}
			}
		}
		
		[Column(Storage="_BackPic", DbType="NVarChar(200)")]
		public string BackPic
		{
			get
			{
				return this._BackPic;
			}
			set
			{
				if ((this._BackPic != value))
				{
					this.OnBackPicChanging(value);
					this.SendPropertyChanging();
					this._BackPic = value;
					this.SendPropertyChanged("BackPic");
					this.OnBackPicChanged();
				}
			}
		}
		
		[Column(Storage="_DeadPic", DbType="NVarChar(200)")]
		public string DeadPic
		{
			get
			{
				return this._DeadPic;
			}
			set
			{
				if ((this._DeadPic != value))
				{
					this.OnDeadPicChanging(value);
					this.SendPropertyChanging();
					this._DeadPic = value;
					this.SendPropertyChanged("DeadPic");
					this.OnDeadPicChanged();
				}
			}
		}
		
		[Column(Storage="_Pic", DbType="NVarChar(200)")]
		public string Pic
		{
			get
			{
				return this._Pic;
			}
			set
			{
				if ((this._Pic != value))
				{
					this.OnPicChanging(value);
					this.SendPropertyChanging();
					this._Pic = value;
					this.SendPropertyChanged("Pic");
					this.OnPicChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(50)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_BackMusic", DbType="NVarChar(200)")]
		public string BackMusic
		{
			get
			{
				return this._BackMusic;
			}
			set
			{
				if ((this._BackMusic != value))
				{
					this.OnBackMusicChanging(value);
					this.SendPropertyChanging();
					this._BackMusic = value;
					this.SendPropertyChanged("BackMusic");
					this.OnBackMusicChanged();
				}
			}
		}
		
		[Column(Storage="_PosX", DbType="NVarChar(200)")]
		public string PosX
		{
			get
			{
				return this._PosX;
			}
			set
			{
				if ((this._PosX != value))
				{
					this.OnPosXChanging(value);
					this.SendPropertyChanging();
					this._PosX = value;
					this.SendPropertyChanged("PosX");
					this.OnPosXChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Ball")]
	public partial class Ball : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private double _Power;
		
		private int _Radii;
		
		private string _FlyingPartical;
		
		private string _BombPartical;
		
		private bool _IsSpin;
		
		private int _Mass;
		
		private double _SpinVA;
		
		private int _SpinV;
		
		private int _Amount;
		
		private int _Wind;
		
		private int _DragIndex;
		
		private int _Weight;
		
		private bool _Shake;
		
		private string _ShootSound;
		
		private string _BombSound;
		
		private int _Delay;
		
		private int _ActionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPowerChanging(double value);
    partial void OnPowerChanged();
    partial void OnRadiiChanging(int value);
    partial void OnRadiiChanged();
    partial void OnFlyingParticalChanging(string value);
    partial void OnFlyingParticalChanged();
    partial void OnBombParticalChanging(string value);
    partial void OnBombParticalChanged();
    partial void OnIsSpinChanging(bool value);
    partial void OnIsSpinChanged();
    partial void OnMassChanging(int value);
    partial void OnMassChanged();
    partial void OnSpinVAChanging(double value);
    partial void OnSpinVAChanged();
    partial void OnSpinVChanging(int value);
    partial void OnSpinVChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnWindChanging(int value);
    partial void OnWindChanged();
    partial void OnDragIndexChanging(int value);
    partial void OnDragIndexChanged();
    partial void OnWeightChanging(int value);
    partial void OnWeightChanged();
    partial void OnShakeChanging(bool value);
    partial void OnShakeChanged();
    partial void OnShootSoundChanging(string value);
    partial void OnShootSoundChanged();
    partial void OnBombSoundChanging(string value);
    partial void OnBombSoundChanged();
    partial void OnDelayChanging(int value);
    partial void OnDelayChanged();
    partial void OnActionTypeChanging(int value);
    partial void OnActionTypeChanged();
    #endregion
		
		public Ball()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Power", DbType="Float NOT NULL")]
		public double Power
		{
			get
			{
				return this._Power;
			}
			set
			{
				if ((this._Power != value))
				{
					this.OnPowerChanging(value);
					this.SendPropertyChanging();
					this._Power = value;
					this.SendPropertyChanged("Power");
					this.OnPowerChanged();
				}
			}
		}
		
		[Column(Storage="_Radii", DbType="Int NOT NULL")]
		public int Radii
		{
			get
			{
				return this._Radii;
			}
			set
			{
				if ((this._Radii != value))
				{
					this.OnRadiiChanging(value);
					this.SendPropertyChanging();
					this._Radii = value;
					this.SendPropertyChanged("Radii");
					this.OnRadiiChanged();
				}
			}
		}
		
		[Column(Storage="_FlyingPartical", DbType="NVarChar(200)")]
		public string FlyingPartical
		{
			get
			{
				return this._FlyingPartical;
			}
			set
			{
				if ((this._FlyingPartical != value))
				{
					this.OnFlyingParticalChanging(value);
					this.SendPropertyChanging();
					this._FlyingPartical = value;
					this.SendPropertyChanged("FlyingPartical");
					this.OnFlyingParticalChanged();
				}
			}
		}
		
		[Column(Storage="_BombPartical", DbType="NVarChar(200)")]
		public string BombPartical
		{
			get
			{
				return this._BombPartical;
			}
			set
			{
				if ((this._BombPartical != value))
				{
					this.OnBombParticalChanging(value);
					this.SendPropertyChanging();
					this._BombPartical = value;
					this.SendPropertyChanged("BombPartical");
					this.OnBombParticalChanged();
				}
			}
		}
		
		[Column(Storage="_IsSpin", DbType="Bit NOT NULL")]
		public bool IsSpin
		{
			get
			{
				return this._IsSpin;
			}
			set
			{
				if ((this._IsSpin != value))
				{
					this.OnIsSpinChanging(value);
					this.SendPropertyChanging();
					this._IsSpin = value;
					this.SendPropertyChanged("IsSpin");
					this.OnIsSpinChanged();
				}
			}
		}
		
		[Column(Storage="_Mass", DbType="Int NOT NULL")]
		public int Mass
		{
			get
			{
				return this._Mass;
			}
			set
			{
				if ((this._Mass != value))
				{
					this.OnMassChanging(value);
					this.SendPropertyChanging();
					this._Mass = value;
					this.SendPropertyChanged("Mass");
					this.OnMassChanged();
				}
			}
		}
		
		[Column(Storage="_SpinVA", DbType="Float NOT NULL")]
		public double SpinVA
		{
			get
			{
				return this._SpinVA;
			}
			set
			{
				if ((this._SpinVA != value))
				{
					this.OnSpinVAChanging(value);
					this.SendPropertyChanging();
					this._SpinVA = value;
					this.SendPropertyChanged("SpinVA");
					this.OnSpinVAChanged();
				}
			}
		}
		
		[Column(Storage="_SpinV", DbType="Int NOT NULL")]
		public int SpinV
		{
			get
			{
				return this._SpinV;
			}
			set
			{
				if ((this._SpinV != value))
				{
					this.OnSpinVChanging(value);
					this.SendPropertyChanging();
					this._SpinV = value;
					this.SendPropertyChanged("SpinV");
					this.OnSpinVChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Wind", DbType="Int NOT NULL")]
		public int Wind
		{
			get
			{
				return this._Wind;
			}
			set
			{
				if ((this._Wind != value))
				{
					this.OnWindChanging(value);
					this.SendPropertyChanging();
					this._Wind = value;
					this.SendPropertyChanged("Wind");
					this.OnWindChanged();
				}
			}
		}
		
		[Column(Storage="_DragIndex", DbType="Int NOT NULL")]
		public int DragIndex
		{
			get
			{
				return this._DragIndex;
			}
			set
			{
				if ((this._DragIndex != value))
				{
					this.OnDragIndexChanging(value);
					this.SendPropertyChanging();
					this._DragIndex = value;
					this.SendPropertyChanged("DragIndex");
					this.OnDragIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Int NOT NULL")]
		public int Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_Shake", DbType="Bit NOT NULL")]
		public bool Shake
		{
			get
			{
				return this._Shake;
			}
			set
			{
				if ((this._Shake != value))
				{
					this.OnShakeChanging(value);
					this.SendPropertyChanging();
					this._Shake = value;
					this.SendPropertyChanged("Shake");
					this.OnShakeChanged();
				}
			}
		}
		
		[Column(Storage="_ShootSound", DbType="NVarChar(50)")]
		public string ShootSound
		{
			get
			{
				return this._ShootSound;
			}
			set
			{
				if ((this._ShootSound != value))
				{
					this.OnShootSoundChanging(value);
					this.SendPropertyChanging();
					this._ShootSound = value;
					this.SendPropertyChanged("ShootSound");
					this.OnShootSoundChanged();
				}
			}
		}
		
		[Column(Storage="_BombSound", DbType="NVarChar(50)")]
		public string BombSound
		{
			get
			{
				return this._BombSound;
			}
			set
			{
				if ((this._BombSound != value))
				{
					this.OnBombSoundChanging(value);
					this.SendPropertyChanging();
					this._BombSound = value;
					this.SendPropertyChanged("BombSound");
					this.OnBombSoundChanged();
				}
			}
		}
		
		[Column(Storage="_Delay", DbType="Int NOT NULL")]
		public int Delay
		{
			get
			{
				return this._Delay;
			}
			set
			{
				if ((this._Delay != value))
				{
					this.OnDelayChanging(value);
					this.SendPropertyChanging();
					this._Delay = value;
					this.SendPropertyChanged("Delay");
					this.OnDelayChanged();
				}
			}
		}
		
		[Column(Storage="_ActionType", DbType="Int NOT NULL")]
		public int ActionType
		{
			get
			{
				return this._ActionType;
			}
			set
			{
				if ((this._ActionType != value))
				{
					this.OnActionTypeChanging(value);
					this.SendPropertyChanging();
					this._ActionType = value;
					this.SendPropertyChanged("ActionType");
					this.OnActionTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.User_Messages")]
	public partial class User_Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SenderID;
		
		private string _Sender;
		
		private int _ReceiverID;
		
		private string _Receiver;
		
		private string _Title;
		
		private string _Content;
		
		private System.DateTime _SendTime;
		
		private bool _IsRead;
		
		private bool _IsDelR;
		
		private bool _IfDelS;
		
		private bool _IsDelete;
		
		private string _Annex1;
		
		private string _Annex2;
		
		private int _Gold;
		
		private int _Money;
		
		private bool _IsExist;
		
		private int _Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSenderIDChanging(int value);
    partial void OnSenderIDChanged();
    partial void OnSenderChanging(string value);
    partial void OnSenderChanged();
    partial void OnReceiverIDChanging(int value);
    partial void OnReceiverIDChanged();
    partial void OnReceiverChanging(string value);
    partial void OnReceiverChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnSendTimeChanging(System.DateTime value);
    partial void OnSendTimeChanged();
    partial void OnIsReadChanging(bool value);
    partial void OnIsReadChanged();
    partial void OnIsDelRChanging(bool value);
    partial void OnIsDelRChanged();
    partial void OnIfDelSChanging(bool value);
    partial void OnIfDelSChanged();
    partial void OnIsDeleteChanging(bool value);
    partial void OnIsDeleteChanged();
    partial void OnAnnex1Changing(string value);
    partial void OnAnnex1Changed();
    partial void OnAnnex2Changing(string value);
    partial void OnAnnex2Changed();
    partial void OnGoldChanging(int value);
    partial void OnGoldChanged();
    partial void OnMoneyChanging(int value);
    partial void OnMoneyChanged();
    partial void OnIsExistChanging(bool value);
    partial void OnIsExistChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public User_Message()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_SenderID", DbType="Int NOT NULL")]
		public int SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[Column(Storage="_Sender", DbType="NVarChar(50)")]
		public string Sender
		{
			get
			{
				return this._Sender;
			}
			set
			{
				if ((this._Sender != value))
				{
					this.OnSenderChanging(value);
					this.SendPropertyChanging();
					this._Sender = value;
					this.SendPropertyChanged("Sender");
					this.OnSenderChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiverID", DbType="Int NOT NULL")]
		public int ReceiverID
		{
			get
			{
				return this._ReceiverID;
			}
			set
			{
				if ((this._ReceiverID != value))
				{
					this.OnReceiverIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiverID = value;
					this.SendPropertyChanged("ReceiverID");
					this.OnReceiverIDChanged();
				}
			}
		}
		
		[Column(Storage="_Receiver", DbType="NVarChar(50)")]
		public string Receiver
		{
			get
			{
				return this._Receiver;
			}
			set
			{
				if ((this._Receiver != value))
				{
					this.OnReceiverChanging(value);
					this.SendPropertyChanging();
					this._Receiver = value;
					this.SendPropertyChanged("Receiver");
					this.OnReceiverChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(500)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="NVarChar(3999) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_SendTime", DbType="DateTime NOT NULL")]
		public System.DateTime SendTime
		{
			get
			{
				return this._SendTime;
			}
			set
			{
				if ((this._SendTime != value))
				{
					this.OnSendTimeChanging(value);
					this.SendPropertyChanging();
					this._SendTime = value;
					this.SendPropertyChanged("SendTime");
					this.OnSendTimeChanged();
				}
			}
		}
		
		[Column(Storage="_IsRead", DbType="Bit NOT NULL")]
		public bool IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		[Column(Storage="_IsDelR", DbType="Bit NOT NULL")]
		public bool IsDelR
		{
			get
			{
				return this._IsDelR;
			}
			set
			{
				if ((this._IsDelR != value))
				{
					this.OnIsDelRChanging(value);
					this.SendPropertyChanging();
					this._IsDelR = value;
					this.SendPropertyChanged("IsDelR");
					this.OnIsDelRChanged();
				}
			}
		}
		
		[Column(Storage="_IfDelS", DbType="Bit NOT NULL")]
		public bool IfDelS
		{
			get
			{
				return this._IfDelS;
			}
			set
			{
				if ((this._IfDelS != value))
				{
					this.OnIfDelSChanging(value);
					this.SendPropertyChanging();
					this._IfDelS = value;
					this.SendPropertyChanged("IfDelS");
					this.OnIfDelSChanged();
				}
			}
		}
		
		[Column(Storage="_IsDelete", DbType="Bit NOT NULL")]
		public bool IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[Column(Storage="_Annex1", DbType="NVarChar(50)")]
		public string Annex1
		{
			get
			{
				return this._Annex1;
			}
			set
			{
				if ((this._Annex1 != value))
				{
					this.OnAnnex1Changing(value);
					this.SendPropertyChanging();
					this._Annex1 = value;
					this.SendPropertyChanged("Annex1");
					this.OnAnnex1Changed();
				}
			}
		}
		
		[Column(Storage="_Annex2", DbType="NVarChar(50)")]
		public string Annex2
		{
			get
			{
				return this._Annex2;
			}
			set
			{
				if ((this._Annex2 != value))
				{
					this.OnAnnex2Changing(value);
					this.SendPropertyChanging();
					this._Annex2 = value;
					this.SendPropertyChanged("Annex2");
					this.OnAnnex2Changed();
				}
			}
		}
		
		[Column(Storage="_Gold", DbType="Int NOT NULL")]
		public int Gold
		{
			get
			{
				return this._Gold;
			}
			set
			{
				if ((this._Gold != value))
				{
					this.OnGoldChanging(value);
					this.SendPropertyChanging();
					this._Gold = value;
					this.SendPropertyChanged("Gold");
					this.OnGoldChanged();
				}
			}
		}
		
		[Column(Storage="_Money", DbType="Int NOT NULL")]
		public int Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this.OnMoneyChanging(value);
					this.SendPropertyChanging();
					this._Money = value;
					this.SendPropertyChanged("Money");
					this.OnMoneyChanged();
				}
			}
		}
		
		[Column(Storage="_IsExist", DbType="Bit NOT NULL")]
		public bool IsExist
		{
			get
			{
				return this._IsExist;
			}
			set
			{
				if ((this._IsExist != value))
				{
					this.OnIsExistChanging(value);
					this.SendPropertyChanging();
					this._IsExist = value;
					this.SendPropertyChanged("IsExist");
					this.OnIsExistChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
